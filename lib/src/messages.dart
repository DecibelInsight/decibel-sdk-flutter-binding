// Autogenerated from Pigeon (v1.0.15), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class StartScreenMessage {
  String? screenName;
  int? screenId;
  int? startTime;
  bool? isBackground;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['screenName'] = screenName;
    pigeonMap['screenId'] = screenId;
    pigeonMap['startTime'] = startTime;
    pigeonMap['isBackground'] = isBackground;
    return pigeonMap;
  }

  static StartScreenMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return StartScreenMessage()
      ..screenName = pigeonMap['screenName'] as String?
      ..screenId = pigeonMap['screenId'] as int?
      ..startTime = pigeonMap['startTime'] as int?
      ..isBackground = pigeonMap['isBackground'] as bool?;
  }
}

class EndScreenMessage {
  String? screenName;
  int? screenId;
  int? endTime;
  bool? isBackground;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['screenName'] = screenName;
    pigeonMap['screenId'] = screenId;
    pigeonMap['endTime'] = endTime;
    pigeonMap['isBackground'] = isBackground;
    return pigeonMap;
  }

  static EndScreenMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return EndScreenMessage()
      ..screenName = pigeonMap['screenName'] as String?
      ..screenId = pigeonMap['screenId'] as int?
      ..endTime = pigeonMap['endTime'] as int?
      ..isBackground = pigeonMap['isBackground'] as bool?;
  }
}

class SessionMessage {
  int? account;
  int? property;
  List<int?>? consents;
  String? version;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['account'] = account;
    pigeonMap['property'] = property;
    pigeonMap['consents'] = consents;
    pigeonMap['version'] = version;
    return pigeonMap;
  }

  static SessionMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return SessionMessage()
      ..account = pigeonMap['account'] as int?
      ..property = pigeonMap['property'] as int?
      ..consents = (pigeonMap['consents'] as List<Object?>?)?.cast<int?>()
      ..version = pigeonMap['version'] as String?;
  }
}

class ConsentsMessage {
  List<int?>? consents;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['consents'] = consents;
    return pigeonMap;
  }

  static ConsentsMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ConsentsMessage()
      ..consents = (pigeonMap['consents'] as List<Object?>?)?.cast<int?>();
  }
}

class ScreenshotMessage {
  Uint8List? screenshotData;
  int? screenId;
  String? screenName;
  int? startFocusTime;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['screenshotData'] = screenshotData;
    pigeonMap['screenId'] = screenId;
    pigeonMap['screenName'] = screenName;
    pigeonMap['startFocusTime'] = startFocusTime;
    return pigeonMap;
  }

  static ScreenshotMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ScreenshotMessage()
      ..screenshotData = pigeonMap['screenshotData'] as Uint8List?
      ..screenId = pigeonMap['screenId'] as int?
      ..screenName = pigeonMap['screenName'] as String?
      ..startFocusTime = pigeonMap['startFocusTime'] as int?;
  }
}

class DimensionStringMessage {
  String? dimensionName;
  String? value;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['dimensionName'] = dimensionName;
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static DimensionStringMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return DimensionStringMessage()
      ..dimensionName = pigeonMap['dimensionName'] as String?
      ..value = pigeonMap['value'] as String?;
  }
}

class DimensionNumberMessage {
  String? dimensionName;
  double? value;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['dimensionName'] = dimensionName;
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static DimensionNumberMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return DimensionNumberMessage()
      ..dimensionName = pigeonMap['dimensionName'] as String?
      ..value = pigeonMap['value'] as double?;
  }
}

class DimensionBoolMessage {
  String? dimensionName;
  bool? value;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['dimensionName'] = dimensionName;
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static DimensionBoolMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return DimensionBoolMessage()
      ..dimensionName = pigeonMap['dimensionName'] as String?
      ..value = pigeonMap['value'] as bool?;
  }
}

class GoalMessage {
  String? goal;
  double? value;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['goal'] = goal;
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static GoalMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return GoalMessage()
      ..goal = pigeonMap['goal'] as String?
      ..value = pigeonMap['value'] as double?;
  }
}

class _DecibelSdkApiCodec extends StandardMessageCodec {
  const _DecibelSdkApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ConsentsMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is DimensionBoolMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is DimensionNumberMessage) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is DimensionStringMessage) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is EndScreenMessage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is GoalMessage) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is ScreenshotMessage) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is SessionMessage) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is StartScreenMessage) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return ConsentsMessage.decode(readValue(buffer)!);

      case 129:
        return DimensionBoolMessage.decode(readValue(buffer)!);

      case 130:
        return DimensionNumberMessage.decode(readValue(buffer)!);

      case 131:
        return DimensionStringMessage.decode(readValue(buffer)!);

      case 132:
        return EndScreenMessage.decode(readValue(buffer)!);

      case 133:
        return GoalMessage.decode(readValue(buffer)!);

      case 134:
        return ScreenshotMessage.decode(readValue(buffer)!);

      case 135:
        return SessionMessage.decode(readValue(buffer)!);

      case 136:
        return StartScreenMessage.decode(readValue(buffer)!);

      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class DecibelSdkApi {
  /// Constructor for [DecibelSdkApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  DecibelSdkApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _DecibelSdkApiCodec();

  Future<void> initialize(SessionMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.DecibelSdkApi.initialize', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> startScreen(StartScreenMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.DecibelSdkApi.startScreen', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> endScreen(EndScreenMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.DecibelSdkApi.endScreen', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setEnableConsents(ConsentsMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.DecibelSdkApi.setEnableConsents', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setDisableConsents(ConsentsMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.DecibelSdkApi.setDisableConsents', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> saveScreenshot(ScreenshotMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.DecibelSdkApi.saveScreenshot', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> sendDimensionWithString(DimensionStringMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.DecibelSdkApi.sendDimensionWithString', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> sendDimensionWithNumber(DimensionNumberMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.DecibelSdkApi.sendDimensionWithNumber', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> sendDimensionWithBool(DimensionBoolMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.DecibelSdkApi.sendDimensionWithBool', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> sendGoal(GoalMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.DecibelSdkApi.sendGoal', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<String?> getWebViewProperties() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.DecibelSdkApi.getWebViewProperties', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as String?)!;
    }
  }

  Future<String> getSessionId() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.DecibelSdkApi.getSessionId', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as String?)!;
    }
  }
}
