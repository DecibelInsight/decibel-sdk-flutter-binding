// Autogenerated from Pigeon (v1.0.15), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.decibel.decibel_sdk;

import android.util.Log;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  public enum DecibelCurrency {
    AED(0),
    AFN(1),
    ALL(2),
    AMD(3),
    ANG(4),
    AOA(5),
    ARS(6),
    AUD(7),
    AWG(8),
    AZN(9),
    BAM(10),
    BBD(11),
    BDT(12),
    BGN(13),
    BHD(14),
    BIF(15),
    BMD(16),
    BND(17),
    BOB(18),
    BOV(19),
    BRL(20),
    BSD(21),
    BTN(22),
    BWP(23),
    BYN(24),
    BZD(25),
    CAD(26),
    CDF(27),
    CHE(28),
    CHF(29),
    CHW(30),
    CLF(31),
    CLP(32),
    CNY(33),
    COP(34),
    COU(35),
    CRC(36),
    CUC(37),
    CUP(38),
    CVE(39),
    CZK(40),
    DJF(41),
    DKK(42),
    DOP(43),
    DZD(44),
    EGP(45),
    ERN(46),
    ETB(47),
    EUR(48),
    FJD(49),
    FKP(50),
    GBP(51),
    GEL(52),
    GHS(53),
    GIP(54),
    GMD(55),
    GNF(56),
    GTQ(57),
    GYD(58),
    HKD(59),
    HNL(60),
    HRK(61),
    HTG(62),
    HUF(63),
    IDR(64),
    ILS(65),
    INR(66),
    IQD(67),
    IRR(68),
    ISK(69),
    JMD(70),
    JOD(71),
    JPY(72),
    KES(73),
    KGS(74),
    KHR(75),
    KMF(76),
    KPW(77),
    KRW(78),
    KWD(79),
    KYD(80),
    KZT(81),
    LAK(82),
    LBP(83),
    LKR(84),
    LRD(85),
    LSL(86),
    LYD(87),
    MAD(88),
    MDL(89),
    MGA(90),
    MKD(91),
    MMK(92),
    MNT(93),
    MOP(94),
    MRU(95),
    MUR(96),
    MVR(97),
    MWK(98),
    MXN(99),
    MXV(100),
    MYR(101),
    MZN(102),
    NAD(103),
    NGN(104),
    NIO(105),
    NOK(106),
    NPR(107),
    NZD(108),
    OMR(109),
    PAB(110),
    PEN(111),
    PGK(112),
    PHP(113),
    PKR(114),
    PLN(115),
    PYG(116),
    QAR(117),
    RON(118),
    RSD(119),
    RUB(120),
    RWF(121),
    SAR(122),
    SBD(123),
    SCR(124),
    SDG(125),
    SEK(126),
    SGD(127),
    SHP(128),
    SLL(129),
    SOS(130),
    SRD(131),
    SSP(132),
    STN(133),
    SVC(134),
    SYP(135),
    SZL(136),
    THB(137),
    TJS(138),
    TMT(139),
    TND(140),
    TOP(141),
    TRY(142),
    TTD(143),
    TWD(144),
    TZS(145),
    UAH(146),
    UGX(147),
    USD(148),
    USN(149),
    UYI(150),
    UYU(151),
    UYW(152),
    UZS(153),
    VES(154),
    VND(155),
    VUV(156),
    WST(157),
    XAF(158),
    XAG(159),
    XAU(160),
    XCD(161),
    XDR(162),
    XOF(163),
    XPD(164),
    XPF(165),
    XPT(166),
    XSU(167),
    XTS(168),
    XUA(169),
    XXX(170),
    YER(171),
    ZAR(172),
    ZMW(173),
    ZWL(174);

    private int index;
    private DecibelCurrency(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StartScreenMessage {
    private String screenName;
    public String getScreenName() { return screenName; }
    public void setScreenName(String setterArg) { this.screenName = setterArg; }

    private Long screenId;
    public Long getScreenId() { return screenId; }
    public void setScreenId(Long setterArg) { this.screenId = setterArg; }

    private Long startTime;
    public Long getStartTime() { return startTime; }
    public void setStartTime(Long setterArg) { this.startTime = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("screenName", screenName);
      toMapResult.put("screenId", screenId);
      toMapResult.put("startTime", startTime);
      return toMapResult;
    }
    static StartScreenMessage fromMap(Map<String, Object> map) {
      StartScreenMessage fromMapResult = new StartScreenMessage();
      Object screenName = map.get("screenName");
      fromMapResult.screenName = (String)screenName;
      Object screenId = map.get("screenId");
      fromMapResult.screenId = (screenId == null) ? null : ((screenId instanceof Integer) ? (Integer)screenId : (Long)screenId);
      Object startTime = map.get("startTime");
      fromMapResult.startTime = (startTime == null) ? null : ((startTime instanceof Integer) ? (Integer)startTime : (Long)startTime);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class EndScreenMessage {
    private String screenName;
    public String getScreenName() { return screenName; }
    public void setScreenName(String setterArg) { this.screenName = setterArg; }

    private Long screenId;
    public Long getScreenId() { return screenId; }
    public void setScreenId(Long setterArg) { this.screenId = setterArg; }

    private Long endTime;
    public Long getEndTime() { return endTime; }
    public void setEndTime(Long setterArg) { this.endTime = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("screenName", screenName);
      toMapResult.put("screenId", screenId);
      toMapResult.put("endTime", endTime);
      return toMapResult;
    }
    static EndScreenMessage fromMap(Map<String, Object> map) {
      EndScreenMessage fromMapResult = new EndScreenMessage();
      Object screenName = map.get("screenName");
      fromMapResult.screenName = (String)screenName;
      Object screenId = map.get("screenId");
      fromMapResult.screenId = (screenId == null) ? null : ((screenId instanceof Integer) ? (Integer)screenId : (Long)screenId);
      Object endTime = map.get("endTime");
      fromMapResult.endTime = (endTime == null) ? null : ((endTime instanceof Integer) ? (Integer)endTime : (Long)endTime);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SessionMessage {
    private String account;
    public String getAccount() { return account; }
    public void setAccount(String setterArg) { this.account = setterArg; }

    private String property;
    public String getProperty() { return property; }
    public void setProperty(String setterArg) { this.property = setterArg; }

    private List<Long> consents;
    public List<Long> getConsents() { return consents; }
    public void setConsents(List<Long> setterArg) { this.consents = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("account", account);
      toMapResult.put("property", property);
      toMapResult.put("consents", consents);
      return toMapResult;
    }
    static SessionMessage fromMap(Map<String, Object> map) {
      SessionMessage fromMapResult = new SessionMessage();
      Object account = map.get("account");
      fromMapResult.account = (String)account;
      Object property = map.get("property");
      fromMapResult.property = (String)property;
      Object consents = map.get("consents");
      fromMapResult.consents = (List<Long>)consents;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ConsentsMessage {
    private List<Long> consents;
    public List<Long> getConsents() { return consents; }
    public void setConsents(List<Long> setterArg) { this.consents = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("consents", consents);
      return toMapResult;
    }
    static ConsentsMessage fromMap(Map<String, Object> map) {
      ConsentsMessage fromMapResult = new ConsentsMessage();
      Object consents = map.get("consents");
      fromMapResult.consents = (List<Long>)consents;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ScreenshotMessage {
    private byte[] screenshotData;
    public byte[] getScreenshotData() { return screenshotData; }
    public void setScreenshotData(byte[] setterArg) { this.screenshotData = setterArg; }

    private Long screenId;
    public Long getScreenId() { return screenId; }
    public void setScreenId(Long setterArg) { this.screenId = setterArg; }

    private String screenName;
    public String getScreenName() { return screenName; }
    public void setScreenName(String setterArg) { this.screenName = setterArg; }

    private Long startFocusTime;
    public Long getStartFocusTime() { return startFocusTime; }
    public void setStartFocusTime(Long setterArg) { this.startFocusTime = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("screenshotData", screenshotData);
      toMapResult.put("screenId", screenId);
      toMapResult.put("screenName", screenName);
      toMapResult.put("startFocusTime", startFocusTime);
      return toMapResult;
    }
    static ScreenshotMessage fromMap(Map<String, Object> map) {
      ScreenshotMessage fromMapResult = new ScreenshotMessage();
      Object screenshotData = map.get("screenshotData");
      fromMapResult.screenshotData = (byte[])screenshotData;
      Object screenId = map.get("screenId");
      fromMapResult.screenId = (screenId == null) ? null : ((screenId instanceof Integer) ? (Integer)screenId : (Long)screenId);
      Object screenName = map.get("screenName");
      fromMapResult.screenName = (String)screenName;
      Object startFocusTime = map.get("startFocusTime");
      fromMapResult.startFocusTime = (startFocusTime == null) ? null : ((startFocusTime instanceof Integer) ? (Integer)startFocusTime : (Long)startFocusTime);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DimensionStringMessage {
    private String dimensionName;
    public String getDimensionName() { return dimensionName; }
    public void setDimensionName(String setterArg) { this.dimensionName = setterArg; }

    private String value;
    public String getValue() { return value; }
    public void setValue(String setterArg) { this.value = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("dimensionName", dimensionName);
      toMapResult.put("value", value);
      return toMapResult;
    }
    static DimensionStringMessage fromMap(Map<String, Object> map) {
      DimensionStringMessage fromMapResult = new DimensionStringMessage();
      Object dimensionName = map.get("dimensionName");
      fromMapResult.dimensionName = (String)dimensionName;
      Object value = map.get("value");
      fromMapResult.value = (String)value;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DimensionNumberMessage {
    private String dimensionName;
    public String getDimensionName() { return dimensionName; }
    public void setDimensionName(String setterArg) { this.dimensionName = setterArg; }

    private Double value;
    public Double getValue() { return value; }
    public void setValue(Double setterArg) { this.value = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("dimensionName", dimensionName);
      toMapResult.put("value", value);
      return toMapResult;
    }
    static DimensionNumberMessage fromMap(Map<String, Object> map) {
      DimensionNumberMessage fromMapResult = new DimensionNumberMessage();
      Object dimensionName = map.get("dimensionName");
      fromMapResult.dimensionName = (String)dimensionName;
      Object value = map.get("value");
      fromMapResult.value = (Double)value;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DimensionBoolMessage {
    private String dimensionName;
    public String getDimensionName() { return dimensionName; }
    public void setDimensionName(String setterArg) { this.dimensionName = setterArg; }

    private Boolean value;
    public Boolean getValue() { return value; }
    public void setValue(Boolean setterArg) { this.value = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("dimensionName", dimensionName);
      toMapResult.put("value", value);
      return toMapResult;
    }
    static DimensionBoolMessage fromMap(Map<String, Object> map) {
      DimensionBoolMessage fromMapResult = new DimensionBoolMessage();
      Object dimensionName = map.get("dimensionName");
      fromMapResult.dimensionName = (String)dimensionName;
      Object value = map.get("value");
      fromMapResult.value = (Boolean)value;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class GoalMessage {
    private String goal;
    public String getGoal() { return goal; }
    public void setGoal(String setterArg) { this.goal = setterArg; }

    private Double value;
    public Double getValue() { return value; }
    public void setValue(Double setterArg) { this.value = setterArg; }

    private Long currency;
    public Long getCurrency() { return currency; }
    public void setCurrency(Long setterArg) { this.currency = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("goal", goal);
      toMapResult.put("value", value);
      toMapResult.put("currency", currency);
      return toMapResult;
    }
    static GoalMessage fromMap(Map<String, Object> map) {
      GoalMessage fromMapResult = new GoalMessage();
      Object goal = map.get("goal");
      fromMapResult.goal = (String)goal;
      Object value = map.get("value");
      fromMapResult.value = (Double)value;
      Object currency = map.get("currency");
      fromMapResult.currency = (currency == null) ? null : ((currency instanceof Integer) ? (Integer)currency : (Long)currency);
      return fromMapResult;
    }
  }
  private static class DecibelSdkApiCodec extends StandardMessageCodec {
    public static final DecibelSdkApiCodec INSTANCE = new DecibelSdkApiCodec();
    private DecibelSdkApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ConsentsMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return DimensionBoolMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return DimensionNumberMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return DimensionStringMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return EndScreenMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return GoalMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return ScreenshotMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return SessionMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return StartScreenMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ConsentsMessage) {
        stream.write(128);
        writeValue(stream, ((ConsentsMessage) value).toMap());
      } else 
      if (value instanceof DimensionBoolMessage) {
        stream.write(129);
        writeValue(stream, ((DimensionBoolMessage) value).toMap());
      } else 
      if (value instanceof DimensionNumberMessage) {
        stream.write(130);
        writeValue(stream, ((DimensionNumberMessage) value).toMap());
      } else 
      if (value instanceof DimensionStringMessage) {
        stream.write(131);
        writeValue(stream, ((DimensionStringMessage) value).toMap());
      } else 
      if (value instanceof EndScreenMessage) {
        stream.write(132);
        writeValue(stream, ((EndScreenMessage) value).toMap());
      } else 
      if (value instanceof GoalMessage) {
        stream.write(133);
        writeValue(stream, ((GoalMessage) value).toMap());
      } else 
      if (value instanceof ScreenshotMessage) {
        stream.write(134);
        writeValue(stream, ((ScreenshotMessage) value).toMap());
      } else 
      if (value instanceof SessionMessage) {
        stream.write(135);
        writeValue(stream, ((SessionMessage) value).toMap());
      } else 
      if (value instanceof StartScreenMessage) {
        stream.write(136);
        writeValue(stream, ((StartScreenMessage) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface DecibelSdkApi {
    void initialize(SessionMessage msg);
    void startScreen(StartScreenMessage msg);
    void endScreen(EndScreenMessage msg);
    void setEnableConsents(ConsentsMessage msg);
    void setDisableConsents(ConsentsMessage msg);
    void saveScreenshot(ScreenshotMessage msg);
    void sendDimensionWithString(DimensionStringMessage msg);
    void sendDimensionWithNumber(DimensionNumberMessage msg);
    void sendDimensionWithBool(DimensionBoolMessage msg);
    void sendGoal(GoalMessage msg);

    /** The codec used by DecibelSdkApi. */
    static MessageCodec<Object> getCodec() {
      return DecibelSdkApiCodec.INSTANCE;
    }

    /** Sets up an instance of `DecibelSdkApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, DecibelSdkApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DecibelSdkApi.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              SessionMessage msgArg = (SessionMessage)args.get(0);
              if (msgArg == null) {
                throw new NullPointerException("msgArg unexpectedly null.");
              }
              api.initialize(msgArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DecibelSdkApi.startScreen", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StartScreenMessage msgArg = (StartScreenMessage)args.get(0);
              if (msgArg == null) {
                throw new NullPointerException("msgArg unexpectedly null.");
              }
              api.startScreen(msgArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DecibelSdkApi.endScreen", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              EndScreenMessage msgArg = (EndScreenMessage)args.get(0);
              if (msgArg == null) {
                throw new NullPointerException("msgArg unexpectedly null.");
              }
              api.endScreen(msgArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DecibelSdkApi.setEnableConsents", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ConsentsMessage msgArg = (ConsentsMessage)args.get(0);
              if (msgArg == null) {
                throw new NullPointerException("msgArg unexpectedly null.");
              }
              api.setEnableConsents(msgArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DecibelSdkApi.setDisableConsents", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ConsentsMessage msgArg = (ConsentsMessage)args.get(0);
              if (msgArg == null) {
                throw new NullPointerException("msgArg unexpectedly null.");
              }
              api.setDisableConsents(msgArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DecibelSdkApi.saveScreenshot", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ScreenshotMessage msgArg = (ScreenshotMessage)args.get(0);
              if (msgArg == null) {
                throw new NullPointerException("msgArg unexpectedly null.");
              }
              api.saveScreenshot(msgArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DecibelSdkApi.sendDimensionWithString", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              DimensionStringMessage msgArg = (DimensionStringMessage)args.get(0);
              if (msgArg == null) {
                throw new NullPointerException("msgArg unexpectedly null.");
              }
              api.sendDimensionWithString(msgArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DecibelSdkApi.sendDimensionWithNumber", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              DimensionNumberMessage msgArg = (DimensionNumberMessage)args.get(0);
              if (msgArg == null) {
                throw new NullPointerException("msgArg unexpectedly null.");
              }
              api.sendDimensionWithNumber(msgArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DecibelSdkApi.sendDimensionWithBool", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              DimensionBoolMessage msgArg = (DimensionBoolMessage)args.get(0);
              if (msgArg == null) {
                throw new NullPointerException("msgArg unexpectedly null.");
              }
              api.sendDimensionWithBool(msgArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DecibelSdkApi.sendGoal", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              GoalMessage msgArg = (GoalMessage)args.get(0);
              if (msgArg == null) {
                throw new NullPointerException("msgArg unexpectedly null.");
              }
              api.sendGoal(msgArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
