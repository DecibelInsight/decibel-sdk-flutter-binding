// Autogenerated from Pigeon (v9.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.decibel.decibel_sdk;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {
  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
      "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class StartScreenMessage {
    private @NonNull String screenName;

    public @NonNull String getScreenName() {
      return screenName;
    }

    public void setScreenName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"screenName\" is null.");
      }
      this.screenName = setterArg;
    }

    private @NonNull Long screenId;

    public @NonNull Long getScreenId() {
      return screenId;
    }

    public void setScreenId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"screenId\" is null.");
      }
      this.screenId = setterArg;
    }

    private @NonNull Long startTime;

    public @NonNull Long getStartTime() {
      return startTime;
    }

    public void setStartTime(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"startTime\" is null.");
      }
      this.startTime = setterArg;
    }

    private @NonNull Boolean isBackground;

    public @NonNull Boolean getIsBackground() {
      return isBackground;
    }

    public void setIsBackground(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isBackground\" is null.");
      }
      this.isBackground = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private StartScreenMessage() {}

    public static final class Builder {

      private @Nullable String screenName;

      public @NonNull Builder setScreenName(@NonNull String setterArg) {
        this.screenName = setterArg;
        return this;
      }

      private @Nullable Long screenId;

      public @NonNull Builder setScreenId(@NonNull Long setterArg) {
        this.screenId = setterArg;
        return this;
      }

      private @Nullable Long startTime;

      public @NonNull Builder setStartTime(@NonNull Long setterArg) {
        this.startTime = setterArg;
        return this;
      }

      private @Nullable Boolean isBackground;

      public @NonNull Builder setIsBackground(@NonNull Boolean setterArg) {
        this.isBackground = setterArg;
        return this;
      }

      public @NonNull StartScreenMessage build() {
        StartScreenMessage pigeonReturn = new StartScreenMessage();
        pigeonReturn.setScreenName(screenName);
        pigeonReturn.setScreenId(screenId);
        pigeonReturn.setStartTime(startTime);
        pigeonReturn.setIsBackground(isBackground);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(screenName);
      toListResult.add(screenId);
      toListResult.add(startTime);
      toListResult.add(isBackground);
      return toListResult;
    }

    static @NonNull StartScreenMessage fromList(@NonNull ArrayList<Object> list) {
      StartScreenMessage pigeonResult = new StartScreenMessage();
      Object screenName = list.get(0);
      pigeonResult.setScreenName((String) screenName);
      Object screenId = list.get(1);
      pigeonResult.setScreenId((screenId == null) ? null : ((screenId instanceof Integer) ? (Integer) screenId : (Long) screenId));
      Object startTime = list.get(2);
      pigeonResult.setStartTime((startTime == null) ? null : ((startTime instanceof Integer) ? (Integer) startTime : (Long) startTime));
      Object isBackground = list.get(3);
      pigeonResult.setIsBackground((Boolean) isBackground);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class EndScreenMessage {
    private @NonNull String screenName;

    public @NonNull String getScreenName() {
      return screenName;
    }

    public void setScreenName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"screenName\" is null.");
      }
      this.screenName = setterArg;
    }

    private @NonNull Long screenId;

    public @NonNull Long getScreenId() {
      return screenId;
    }

    public void setScreenId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"screenId\" is null.");
      }
      this.screenId = setterArg;
    }

    private @NonNull Long endTime;

    public @NonNull Long getEndTime() {
      return endTime;
    }

    public void setEndTime(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"endTime\" is null.");
      }
      this.endTime = setterArg;
    }

    private @NonNull Boolean isBackground;

    public @NonNull Boolean getIsBackground() {
      return isBackground;
    }

    public void setIsBackground(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isBackground\" is null.");
      }
      this.isBackground = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private EndScreenMessage() {}

    public static final class Builder {

      private @Nullable String screenName;

      public @NonNull Builder setScreenName(@NonNull String setterArg) {
        this.screenName = setterArg;
        return this;
      }

      private @Nullable Long screenId;

      public @NonNull Builder setScreenId(@NonNull Long setterArg) {
        this.screenId = setterArg;
        return this;
      }

      private @Nullable Long endTime;

      public @NonNull Builder setEndTime(@NonNull Long setterArg) {
        this.endTime = setterArg;
        return this;
      }

      private @Nullable Boolean isBackground;

      public @NonNull Builder setIsBackground(@NonNull Boolean setterArg) {
        this.isBackground = setterArg;
        return this;
      }

      public @NonNull EndScreenMessage build() {
        EndScreenMessage pigeonReturn = new EndScreenMessage();
        pigeonReturn.setScreenName(screenName);
        pigeonReturn.setScreenId(screenId);
        pigeonReturn.setEndTime(endTime);
        pigeonReturn.setIsBackground(isBackground);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(screenName);
      toListResult.add(screenId);
      toListResult.add(endTime);
      toListResult.add(isBackground);
      return toListResult;
    }

    static @NonNull EndScreenMessage fromList(@NonNull ArrayList<Object> list) {
      EndScreenMessage pigeonResult = new EndScreenMessage();
      Object screenName = list.get(0);
      pigeonResult.setScreenName((String) screenName);
      Object screenId = list.get(1);
      pigeonResult.setScreenId((screenId == null) ? null : ((screenId instanceof Integer) ? (Integer) screenId : (Long) screenId));
      Object endTime = list.get(2);
      pigeonResult.setEndTime((endTime == null) ? null : ((endTime instanceof Integer) ? (Integer) endTime : (Long) endTime));
      Object isBackground = list.get(3);
      pigeonResult.setIsBackground((Boolean) isBackground);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SessionMessage {
    private @NonNull Long account;

    public @NonNull Long getAccount() {
      return account;
    }

    public void setAccount(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"account\" is null.");
      }
      this.account = setterArg;
    }

    private @NonNull Long property;

    public @NonNull Long getProperty() {
      return property;
    }

    public void setProperty(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"property\" is null.");
      }
      this.property = setterArg;
    }

    private @NonNull List<Long> consents;

    public @NonNull List<Long> getConsents() {
      return consents;
    }

    public void setConsents(@NonNull List<Long> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"consents\" is null.");
      }
      this.consents = setterArg;
    }

    private @NonNull String version;

    public @NonNull String getVersion() {
      return version;
    }

    public void setVersion(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"version\" is null.");
      }
      this.version = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SessionMessage() {}

    public static final class Builder {

      private @Nullable Long account;

      public @NonNull Builder setAccount(@NonNull Long setterArg) {
        this.account = setterArg;
        return this;
      }

      private @Nullable Long property;

      public @NonNull Builder setProperty(@NonNull Long setterArg) {
        this.property = setterArg;
        return this;
      }

      private @Nullable List<Long> consents;

      public @NonNull Builder setConsents(@NonNull List<Long> setterArg) {
        this.consents = setterArg;
        return this;
      }

      private @Nullable String version;

      public @NonNull Builder setVersion(@NonNull String setterArg) {
        this.version = setterArg;
        return this;
      }

      public @NonNull SessionMessage build() {
        SessionMessage pigeonReturn = new SessionMessage();
        pigeonReturn.setAccount(account);
        pigeonReturn.setProperty(property);
        pigeonReturn.setConsents(consents);
        pigeonReturn.setVersion(version);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(account);
      toListResult.add(property);
      toListResult.add(consents);
      toListResult.add(version);
      return toListResult;
    }

    static @NonNull SessionMessage fromList(@NonNull ArrayList<Object> list) {
      SessionMessage pigeonResult = new SessionMessage();
      Object account = list.get(0);
      pigeonResult.setAccount((account == null) ? null : ((account instanceof Integer) ? (Integer) account : (Long) account));
      Object property = list.get(1);
      pigeonResult.setProperty((property == null) ? null : ((property instanceof Integer) ? (Integer) property : (Long) property));
      Object consents = list.get(2);
      pigeonResult.setConsents((List<Long>) consents);
      Object version = list.get(3);
      pigeonResult.setVersion((String) version);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ConsentsMessage {
    private @NonNull List<Long> consents;

    public @NonNull List<Long> getConsents() {
      return consents;
    }

    public void setConsents(@NonNull List<Long> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"consents\" is null.");
      }
      this.consents = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ConsentsMessage() {}

    public static final class Builder {

      private @Nullable List<Long> consents;

      public @NonNull Builder setConsents(@NonNull List<Long> setterArg) {
        this.consents = setterArg;
        return this;
      }

      public @NonNull ConsentsMessage build() {
        ConsentsMessage pigeonReturn = new ConsentsMessage();
        pigeonReturn.setConsents(consents);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(consents);
      return toListResult;
    }

    static @NonNull ConsentsMessage fromList(@NonNull ArrayList<Object> list) {
      ConsentsMessage pigeonResult = new ConsentsMessage();
      Object consents = list.get(0);
      pigeonResult.setConsents((List<Long>) consents);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ScreenshotMessage {
    private @NonNull byte[] screenshotData;

    public @NonNull byte[] getScreenshotData() {
      return screenshotData;
    }

    public void setScreenshotData(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"screenshotData\" is null.");
      }
      this.screenshotData = setterArg;
    }

    private @NonNull Long screenId;

    public @NonNull Long getScreenId() {
      return screenId;
    }

    public void setScreenId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"screenId\" is null.");
      }
      this.screenId = setterArg;
    }

    private @NonNull String screenName;

    public @NonNull String getScreenName() {
      return screenName;
    }

    public void setScreenName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"screenName\" is null.");
      }
      this.screenName = setterArg;
    }

    private @NonNull Long startFocusTime;

    public @NonNull Long getStartFocusTime() {
      return startFocusTime;
    }

    public void setStartFocusTime(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"startFocusTime\" is null.");
      }
      this.startFocusTime = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ScreenshotMessage() {}

    public static final class Builder {

      private @Nullable byte[] screenshotData;

      public @NonNull Builder setScreenshotData(@NonNull byte[] setterArg) {
        this.screenshotData = setterArg;
        return this;
      }

      private @Nullable Long screenId;

      public @NonNull Builder setScreenId(@NonNull Long setterArg) {
        this.screenId = setterArg;
        return this;
      }

      private @Nullable String screenName;

      public @NonNull Builder setScreenName(@NonNull String setterArg) {
        this.screenName = setterArg;
        return this;
      }

      private @Nullable Long startFocusTime;

      public @NonNull Builder setStartFocusTime(@NonNull Long setterArg) {
        this.startFocusTime = setterArg;
        return this;
      }

      public @NonNull ScreenshotMessage build() {
        ScreenshotMessage pigeonReturn = new ScreenshotMessage();
        pigeonReturn.setScreenshotData(screenshotData);
        pigeonReturn.setScreenId(screenId);
        pigeonReturn.setScreenName(screenName);
        pigeonReturn.setStartFocusTime(startFocusTime);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(screenshotData);
      toListResult.add(screenId);
      toListResult.add(screenName);
      toListResult.add(startFocusTime);
      return toListResult;
    }

    static @NonNull ScreenshotMessage fromList(@NonNull ArrayList<Object> list) {
      ScreenshotMessage pigeonResult = new ScreenshotMessage();
      Object screenshotData = list.get(0);
      pigeonResult.setScreenshotData((byte[]) screenshotData);
      Object screenId = list.get(1);
      pigeonResult.setScreenId((screenId == null) ? null : ((screenId instanceof Integer) ? (Integer) screenId : (Long) screenId));
      Object screenName = list.get(2);
      pigeonResult.setScreenName((String) screenName);
      Object startFocusTime = list.get(3);
      pigeonResult.setStartFocusTime((startFocusTime == null) ? null : ((startFocusTime instanceof Integer) ? (Integer) startFocusTime : (Long) startFocusTime));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DimensionStringMessage {
    private @NonNull String dimensionName;

    public @NonNull String getDimensionName() {
      return dimensionName;
    }

    public void setDimensionName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"dimensionName\" is null.");
      }
      this.dimensionName = setterArg;
    }

    private @NonNull String value;

    public @NonNull String getValue() {
      return value;
    }

    public void setValue(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private DimensionStringMessage() {}

    public static final class Builder {

      private @Nullable String dimensionName;

      public @NonNull Builder setDimensionName(@NonNull String setterArg) {
        this.dimensionName = setterArg;
        return this;
      }

      private @Nullable String value;

      public @NonNull Builder setValue(@NonNull String setterArg) {
        this.value = setterArg;
        return this;
      }

      public @NonNull DimensionStringMessage build() {
        DimensionStringMessage pigeonReturn = new DimensionStringMessage();
        pigeonReturn.setDimensionName(dimensionName);
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(dimensionName);
      toListResult.add(value);
      return toListResult;
    }

    static @NonNull DimensionStringMessage fromList(@NonNull ArrayList<Object> list) {
      DimensionStringMessage pigeonResult = new DimensionStringMessage();
      Object dimensionName = list.get(0);
      pigeonResult.setDimensionName((String) dimensionName);
      Object value = list.get(1);
      pigeonResult.setValue((String) value);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DimensionNumberMessage {
    private @NonNull String dimensionName;

    public @NonNull String getDimensionName() {
      return dimensionName;
    }

    public void setDimensionName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"dimensionName\" is null.");
      }
      this.dimensionName = setterArg;
    }

    private @NonNull Double value;

    public @NonNull Double getValue() {
      return value;
    }

    public void setValue(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private DimensionNumberMessage() {}

    public static final class Builder {

      private @Nullable String dimensionName;

      public @NonNull Builder setDimensionName(@NonNull String setterArg) {
        this.dimensionName = setterArg;
        return this;
      }

      private @Nullable Double value;

      public @NonNull Builder setValue(@NonNull Double setterArg) {
        this.value = setterArg;
        return this;
      }

      public @NonNull DimensionNumberMessage build() {
        DimensionNumberMessage pigeonReturn = new DimensionNumberMessage();
        pigeonReturn.setDimensionName(dimensionName);
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(dimensionName);
      toListResult.add(value);
      return toListResult;
    }

    static @NonNull DimensionNumberMessage fromList(@NonNull ArrayList<Object> list) {
      DimensionNumberMessage pigeonResult = new DimensionNumberMessage();
      Object dimensionName = list.get(0);
      pigeonResult.setDimensionName((String) dimensionName);
      Object value = list.get(1);
      pigeonResult.setValue((Double) value);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DimensionBoolMessage {
    private @NonNull String dimensionName;

    public @NonNull String getDimensionName() {
      return dimensionName;
    }

    public void setDimensionName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"dimensionName\" is null.");
      }
      this.dimensionName = setterArg;
    }

    private @NonNull Boolean value;

    public @NonNull Boolean getValue() {
      return value;
    }

    public void setValue(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private DimensionBoolMessage() {}

    public static final class Builder {

      private @Nullable String dimensionName;

      public @NonNull Builder setDimensionName(@NonNull String setterArg) {
        this.dimensionName = setterArg;
        return this;
      }

      private @Nullable Boolean value;

      public @NonNull Builder setValue(@NonNull Boolean setterArg) {
        this.value = setterArg;
        return this;
      }

      public @NonNull DimensionBoolMessage build() {
        DimensionBoolMessage pigeonReturn = new DimensionBoolMessage();
        pigeonReturn.setDimensionName(dimensionName);
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(dimensionName);
      toListResult.add(value);
      return toListResult;
    }

    static @NonNull DimensionBoolMessage fromList(@NonNull ArrayList<Object> list) {
      DimensionBoolMessage pigeonResult = new DimensionBoolMessage();
      Object dimensionName = list.get(0);
      pigeonResult.setDimensionName((String) dimensionName);
      Object value = list.get(1);
      pigeonResult.setValue((Boolean) value);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class GoalMessage {
    private @NonNull String goal;

    public @NonNull String getGoal() {
      return goal;
    }

    public void setGoal(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"goal\" is null.");
      }
      this.goal = setterArg;
    }

    private @Nullable Double value;

    public @Nullable Double getValue() {
      return value;
    }

    public void setValue(@Nullable Double setterArg) {
      this.value = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private GoalMessage() {}

    public static final class Builder {

      private @Nullable String goal;

      public @NonNull Builder setGoal(@NonNull String setterArg) {
        this.goal = setterArg;
        return this;
      }

      private @Nullable Double value;

      public @NonNull Builder setValue(@Nullable Double setterArg) {
        this.value = setterArg;
        return this;
      }

      public @NonNull GoalMessage build() {
        GoalMessage pigeonReturn = new GoalMessage();
        pigeonReturn.setGoal(goal);
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(goal);
      toListResult.add(value);
      return toListResult;
    }

    static @NonNull GoalMessage fromList(@NonNull ArrayList<Object> list) {
      GoalMessage pigeonResult = new GoalMessage();
      Object goal = list.get(0);
      pigeonResult.setGoal((String) goal);
      Object value = list.get(1);
      pigeonResult.setValue((Double) value);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);

    void error(Throwable error);
  }

  private static class MedalliaDxaNativeApiCodec extends StandardMessageCodec {
    public static final MedalliaDxaNativeApiCodec INSTANCE = new MedalliaDxaNativeApiCodec();

    private MedalliaDxaNativeApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return ConsentsMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return DimensionBoolMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return DimensionNumberMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return DimensionStringMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return EndScreenMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return GoalMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return ScreenshotMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return SessionMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return StartScreenMessage.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof ConsentsMessage) {
        stream.write(128);
        writeValue(stream, ((ConsentsMessage) value).toList());
      } else if (value instanceof DimensionBoolMessage) {
        stream.write(129);
        writeValue(stream, ((DimensionBoolMessage) value).toList());
      } else if (value instanceof DimensionNumberMessage) {
        stream.write(130);
        writeValue(stream, ((DimensionNumberMessage) value).toList());
      } else if (value instanceof DimensionStringMessage) {
        stream.write(131);
        writeValue(stream, ((DimensionStringMessage) value).toList());
      } else if (value instanceof EndScreenMessage) {
        stream.write(132);
        writeValue(stream, ((EndScreenMessage) value).toList());
      } else if (value instanceof GoalMessage) {
        stream.write(133);
        writeValue(stream, ((GoalMessage) value).toList());
      } else if (value instanceof ScreenshotMessage) {
        stream.write(134);
        writeValue(stream, ((ScreenshotMessage) value).toList());
      } else if (value instanceof SessionMessage) {
        stream.write(135);
        writeValue(stream, ((SessionMessage) value).toList());
      } else if (value instanceof StartScreenMessage) {
        stream.write(136);
        writeValue(stream, ((StartScreenMessage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface MedalliaDxaNativeApi {

    void initialize(@NonNull SessionMessage msg);

    void startScreen(@NonNull StartScreenMessage msg, Result<Void> result);

    void endScreen(@NonNull EndScreenMessage msg, Result<Void> result);

    void setEnableConsents(@NonNull ConsentsMessage msg);

    void setDisableConsents(@NonNull ConsentsMessage msg);

    void saveScreenshot(@NonNull ScreenshotMessage msg, Result<Void> result);

    void sendDimensionWithString(@NonNull DimensionStringMessage msg);

    void sendDimensionWithNumber(@NonNull DimensionNumberMessage msg);

    void sendDimensionWithBool(@NonNull DimensionBoolMessage msg);

    void sendGoal(@NonNull GoalMessage msg);

    void sendDataOverWifiOnly();

    void sendHttpError(@NonNull Long msg);

    void enableSessionForExperience(@NonNull Boolean value);

    void enableSessionForAnalysis(@NonNull Boolean value);

    void enableSessionForReplay(@NonNull Boolean value);

    void enableScreenForAnalysis(@NonNull Boolean value);

    void getWebViewProperties(Result<String> result);

    void getSessionId(Result<String> result);

    /** The codec used by MedalliaDxaNativeApi. */
    static MessageCodec<Object> getCodec() {
      return MedalliaDxaNativeApiCodec.INSTANCE;
    }
    /**Sets up an instance of `MedalliaDxaNativeApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, MedalliaDxaNativeApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MedalliaDxaNativeApi.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  SessionMessage msgArg = (SessionMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.initialize(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MedalliaDxaNativeApi.startScreen", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  StartScreenMessage msgArg = (StartScreenMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  Result<Void> resultCallback = 
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(0, null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.startScreen(msgArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MedalliaDxaNativeApi.endScreen", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  EndScreenMessage msgArg = (EndScreenMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  Result<Void> resultCallback = 
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(0, null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.endScreen(msgArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MedalliaDxaNativeApi.setEnableConsents", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  ConsentsMessage msgArg = (ConsentsMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.setEnableConsents(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MedalliaDxaNativeApi.setDisableConsents", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  ConsentsMessage msgArg = (ConsentsMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.setDisableConsents(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MedalliaDxaNativeApi.saveScreenshot", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  ScreenshotMessage msgArg = (ScreenshotMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  Result<Void> resultCallback = 
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(0, null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.saveScreenshot(msgArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MedalliaDxaNativeApi.sendDimensionWithString", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  DimensionStringMessage msgArg = (DimensionStringMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.sendDimensionWithString(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MedalliaDxaNativeApi.sendDimensionWithNumber", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  DimensionNumberMessage msgArg = (DimensionNumberMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.sendDimensionWithNumber(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MedalliaDxaNativeApi.sendDimensionWithBool", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  DimensionBoolMessage msgArg = (DimensionBoolMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.sendDimensionWithBool(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MedalliaDxaNativeApi.sendGoal", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  GoalMessage msgArg = (GoalMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.sendGoal(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MedalliaDxaNativeApi.sendDataOverWifiOnly", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.sendDataOverWifiOnly();
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MedalliaDxaNativeApi.sendHttpError", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number msgArg = (Number) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.sendHttpError((msgArg == null) ? null : msgArg.longValue());
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MedalliaDxaNativeApi.enableSessionForExperience", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Boolean valueArg = (Boolean) args.get(0);
                  if (valueArg == null) {
                    throw new NullPointerException("valueArg unexpectedly null.");
                  }
                  api.enableSessionForExperience(valueArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MedalliaDxaNativeApi.enableSessionForAnalysis", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Boolean valueArg = (Boolean) args.get(0);
                  if (valueArg == null) {
                    throw new NullPointerException("valueArg unexpectedly null.");
                  }
                  api.enableSessionForAnalysis(valueArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MedalliaDxaNativeApi.enableSessionForReplay", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Boolean valueArg = (Boolean) args.get(0);
                  if (valueArg == null) {
                    throw new NullPointerException("valueArg unexpectedly null.");
                  }
                  api.enableSessionForReplay(valueArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MedalliaDxaNativeApi.enableScreenForAnalysis", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Boolean valueArg = (Boolean) args.get(0);
                  if (valueArg == null) {
                    throw new NullPointerException("valueArg unexpectedly null.");
                  }
                  api.enableScreenForAnalysis(valueArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MedalliaDxaNativeApi.getWebViewProperties", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Result<String> resultCallback = 
                      new Result<String>() {
                        public void success(String result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.getWebViewProperties(resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MedalliaDxaNativeApi.getSessionId", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Result<String> resultCallback = 
                      new Result<String>() {
                        public void success(String result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.getSessionId(resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
