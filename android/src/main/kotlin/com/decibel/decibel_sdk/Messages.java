// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.decibel.decibel_sdk;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SessionMessage {
    private String account;
    public String getAccount() { return account; }
    public void setAccount(String setterArg) { this.account = setterArg; }

    private String property;
    public String getProperty() { return property; }
    public void setProperty(String setterArg) { this.property = setterArg; }

    private List<Object> consents;
    public List<Object> getConsents() { return consents; }
    public void setConsents(List<Object> setterArg) { this.consents = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("account", account);
      toMapResult.put("property", property);
      toMapResult.put("consents", consents);
      return toMapResult;
    }
    static SessionMessage fromMap(Map<String, Object> map) {
      SessionMessage fromMapResult = new SessionMessage();
      Object account = map.get("account");
      fromMapResult.account = (String)account;
      Object property = map.get("property");
      fromMapResult.property = (String)property;
      Object consents = map.get("consents");
      fromMapResult.consents = (List<Object>)consents;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ScreenMessage {
    private String screenName;
    public String getScreenName() { return screenName; }
    public void setScreenName(String setterArg) { this.screenName = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("screenName", screenName);
      return toMapResult;
    }
    static ScreenMessage fromMap(Map<String, Object> map) {
      ScreenMessage fromMapResult = new ScreenMessage();
      Object screenName = map.get("screenName");
      fromMapResult.screenName = (String)screenName;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ConsentsMessage {
    private List<Object> consents;
    public List<Object> getConsents() { return consents; }
    public void setConsents(List<Object> setterArg) { this.consents = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("consents", consents);
      return toMapResult;
    }
    static ConsentsMessage fromMap(Map<String, Object> map) {
      ConsentsMessage fromMapResult = new ConsentsMessage();
      Object consents = map.get("consents");
      fromMapResult.consents = (List<Object>)consents;
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface DecibelSdkApi {
    void initialize(SessionMessage arg);
    void setScreen(ScreenMessage arg);
    void uiChanged();
    void setEnableConsents(ConsentsMessage arg);
    void setDisableConsents(ConsentsMessage arg);

    /** Sets up an instance of `DecibelSdkApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, DecibelSdkApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DecibelSdkApi.initialize", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SessionMessage input = SessionMessage.fromMap((Map<String, Object>)message);
              api.initialize(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DecibelSdkApi.setScreen", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              ScreenMessage input = ScreenMessage.fromMap((Map<String, Object>)message);
              api.setScreen(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DecibelSdkApi.uiChanged", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.uiChanged();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DecibelSdkApi.setEnableConsents", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              ConsentsMessage input = ConsentsMessage.fromMap((Map<String, Object>)message);
              api.setEnableConsents(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DecibelSdkApi.setDisableConsents", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              ConsentsMessage input = ConsentsMessage.fromMap((Map<String, Object>)message);
              api.setDisableConsents(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
