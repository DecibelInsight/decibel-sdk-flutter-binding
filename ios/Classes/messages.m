// Autogenerated from Pigeon (v1.0.15), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface FLTStartScreenMessage ()
+ (FLTStartScreenMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTEndScreenMessage ()
+ (FLTEndScreenMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTSessionMessage ()
+ (FLTSessionMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTConsentsMessage ()
+ (FLTConsentsMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTScreenshotMessage ()
+ (FLTScreenshotMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTDimensionStringMessage ()
+ (FLTDimensionStringMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTDimensionNumberMessage ()
+ (FLTDimensionNumberMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTDimensionBoolMessage ()
+ (FLTDimensionBoolMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTGoalMessage ()
+ (FLTGoalMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation FLTStartScreenMessage
+ (FLTStartScreenMessage *)fromMap:(NSDictionary *)dict {
  FLTStartScreenMessage *result = [[FLTStartScreenMessage alloc] init];
  result.screenName = dict[@"screenName"];
  if ((NSNull *)result.screenName == [NSNull null]) {
    result.screenName = nil;
  }
  result.screenId = dict[@"screenId"];
  if ((NSNull *)result.screenId == [NSNull null]) {
    result.screenId = nil;
  }
  result.startTime = dict[@"startTime"];
  if ((NSNull *)result.startTime == [NSNull null]) {
    result.startTime = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.screenName ? self.screenName : [NSNull null]), @"screenName", (self.screenId ? self.screenId : [NSNull null]), @"screenId", (self.startTime ? self.startTime : [NSNull null]), @"startTime", nil];
}
@end

@implementation FLTEndScreenMessage
+ (FLTEndScreenMessage *)fromMap:(NSDictionary *)dict {
  FLTEndScreenMessage *result = [[FLTEndScreenMessage alloc] init];
  result.screenName = dict[@"screenName"];
  if ((NSNull *)result.screenName == [NSNull null]) {
    result.screenName = nil;
  }
  result.screenId = dict[@"screenId"];
  if ((NSNull *)result.screenId == [NSNull null]) {
    result.screenId = nil;
  }
  result.endTime = dict[@"endTime"];
  if ((NSNull *)result.endTime == [NSNull null]) {
    result.endTime = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.screenName ? self.screenName : [NSNull null]), @"screenName", (self.screenId ? self.screenId : [NSNull null]), @"screenId", (self.endTime ? self.endTime : [NSNull null]), @"endTime", nil];
}
@end

@implementation FLTSessionMessage
+ (FLTSessionMessage *)fromMap:(NSDictionary *)dict {
  FLTSessionMessage *result = [[FLTSessionMessage alloc] init];
  result.account = dict[@"account"];
  if ((NSNull *)result.account == [NSNull null]) {
    result.account = nil;
  }
  result.property = dict[@"property"];
  if ((NSNull *)result.property == [NSNull null]) {
    result.property = nil;
  }
  result.consents = dict[@"consents"];
  if ((NSNull *)result.consents == [NSNull null]) {
    result.consents = nil;
  }
  result.version = dict[@"version"];
  if ((NSNull *)result.version == [NSNull null]) {
    result.version = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.account ? self.account : [NSNull null]), @"account", (self.property ? self.property : [NSNull null]), @"property", (self.consents ? self.consents : [NSNull null]), @"consents", (self.version ? self.version : [NSNull null]), @"version", nil];
}
@end

@implementation FLTConsentsMessage
+ (FLTConsentsMessage *)fromMap:(NSDictionary *)dict {
  FLTConsentsMessage *result = [[FLTConsentsMessage alloc] init];
  result.consents = dict[@"consents"];
  if ((NSNull *)result.consents == [NSNull null]) {
    result.consents = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.consents ? self.consents : [NSNull null]), @"consents", nil];
}
@end

@implementation FLTScreenshotMessage
+ (FLTScreenshotMessage *)fromMap:(NSDictionary *)dict {
  FLTScreenshotMessage *result = [[FLTScreenshotMessage alloc] init];
  result.screenshotData = dict[@"screenshotData"];
  if ((NSNull *)result.screenshotData == [NSNull null]) {
    result.screenshotData = nil;
  }
  result.screenId = dict[@"screenId"];
  if ((NSNull *)result.screenId == [NSNull null]) {
    result.screenId = nil;
  }
  result.screenName = dict[@"screenName"];
  if ((NSNull *)result.screenName == [NSNull null]) {
    result.screenName = nil;
  }
  result.startFocusTime = dict[@"startFocusTime"];
  if ((NSNull *)result.startFocusTime == [NSNull null]) {
    result.startFocusTime = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.screenshotData ? self.screenshotData : [NSNull null]), @"screenshotData", (self.screenId ? self.screenId : [NSNull null]), @"screenId", (self.screenName ? self.screenName : [NSNull null]), @"screenName", (self.startFocusTime ? self.startFocusTime : [NSNull null]), @"startFocusTime", nil];
}
@end

@implementation FLTDimensionStringMessage
+ (FLTDimensionStringMessage *)fromMap:(NSDictionary *)dict {
  FLTDimensionStringMessage *result = [[FLTDimensionStringMessage alloc] init];
  result.dimensionName = dict[@"dimensionName"];
  if ((NSNull *)result.dimensionName == [NSNull null]) {
    result.dimensionName = nil;
  }
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.dimensionName ? self.dimensionName : [NSNull null]), @"dimensionName", (self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation FLTDimensionNumberMessage
+ (FLTDimensionNumberMessage *)fromMap:(NSDictionary *)dict {
  FLTDimensionNumberMessage *result = [[FLTDimensionNumberMessage alloc] init];
  result.dimensionName = dict[@"dimensionName"];
  if ((NSNull *)result.dimensionName == [NSNull null]) {
    result.dimensionName = nil;
  }
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.dimensionName ? self.dimensionName : [NSNull null]), @"dimensionName", (self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation FLTDimensionBoolMessage
+ (FLTDimensionBoolMessage *)fromMap:(NSDictionary *)dict {
  FLTDimensionBoolMessage *result = [[FLTDimensionBoolMessage alloc] init];
  result.dimensionName = dict[@"dimensionName"];
  if ((NSNull *)result.dimensionName == [NSNull null]) {
    result.dimensionName = nil;
  }
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.dimensionName ? self.dimensionName : [NSNull null]), @"dimensionName", (self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation FLTGoalMessage
+ (FLTGoalMessage *)fromMap:(NSDictionary *)dict {
  FLTGoalMessage *result = [[FLTGoalMessage alloc] init];
  result.goal = dict[@"goal"];
  if ((NSNull *)result.goal == [NSNull null]) {
    result.goal = nil;
  }
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.goal ? self.goal : [NSNull null]), @"goal", (self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@interface FLTDecibelSdkApiCodecReader : FlutterStandardReader
@end
@implementation FLTDecibelSdkApiCodecReader
- (nullable id)readValueOfType:(UInt8)type
{
  switch (type) {
    case 128:
      return [FLTConsentsMessage fromMap:[self readValue]];

    case 129:
      return [FLTDimensionBoolMessage fromMap:[self readValue]];

    case 130:
      return [FLTDimensionNumberMessage fromMap:[self readValue]];

    case 131:
      return [FLTDimensionStringMessage fromMap:[self readValue]];

    case 132:
      return [FLTEndScreenMessage fromMap:[self readValue]];

    case 133:
      return [FLTGoalMessage fromMap:[self readValue]];

    case 134:
      return [FLTScreenshotMessage fromMap:[self readValue]];

    case 135:
      return [FLTSessionMessage fromMap:[self readValue]];

    case 136:
      return [FLTStartScreenMessage fromMap:[self readValue]];

    default:
      return [super readValueOfType:type];

  }
}
@end

@interface FLTDecibelSdkApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTDecibelSdkApiCodecWriter
- (void)writeValue:(id)value
{
  if ([value isKindOfClass:[FLTConsentsMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else
  if ([value isKindOfClass:[FLTDimensionBoolMessage class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else
  if ([value isKindOfClass:[FLTDimensionNumberMessage class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else
  if ([value isKindOfClass:[FLTDimensionStringMessage class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else
  if ([value isKindOfClass:[FLTEndScreenMessage class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else
  if ([value isKindOfClass:[FLTGoalMessage class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else
  if ([value isKindOfClass:[FLTScreenshotMessage class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else
  if ([value isKindOfClass:[FLTSessionMessage class]]) {
    [self writeByte:135];
    [self writeValue:[value toMap]];
  } else
  if ([value isKindOfClass:[FLTStartScreenMessage class]]) {
    [self writeByte:136];
    [self writeValue:[value toMap]];
  } else
{
    [super writeValue:value];
  }
}
@end

@interface FLTDecibelSdkApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTDecibelSdkApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTDecibelSdkApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTDecibelSdkApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTDecibelSdkApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    FLTDecibelSdkApiCodecReaderWriter *readerWriter = [[FLTDecibelSdkApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void FLTDecibelSdkApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTDecibelSdkApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DecibelSdkApi.initialize"
        binaryMessenger:binaryMessenger
        codec:FLTDecibelSdkApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeMsg:error:)], @"FLTDecibelSdkApi api (%@) doesn't respond to @selector(initializeMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTSessionMessage *arg_msg = args[0];
        FlutterError *error;
        [api initializeMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DecibelSdkApi.startScreen"
        binaryMessenger:binaryMessenger
        codec:FLTDecibelSdkApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startScreenMsg:error:)], @"FLTDecibelSdkApi api (%@) doesn't respond to @selector(startScreenMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTStartScreenMessage *arg_msg = args[0];
        FlutterError *error;
        [api startScreenMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DecibelSdkApi.endScreen"
        binaryMessenger:binaryMessenger
        codec:FLTDecibelSdkApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(endScreenMsg:error:)], @"FLTDecibelSdkApi api (%@) doesn't respond to @selector(endScreenMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTEndScreenMessage *arg_msg = args[0];
        FlutterError *error;
        [api endScreenMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DecibelSdkApi.setEnableConsents"
        binaryMessenger:binaryMessenger
        codec:FLTDecibelSdkApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setEnableConsentsMsg:error:)], @"FLTDecibelSdkApi api (%@) doesn't respond to @selector(setEnableConsentsMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTConsentsMessage *arg_msg = args[0];
        FlutterError *error;
        [api setEnableConsentsMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DecibelSdkApi.setDisableConsents"
        binaryMessenger:binaryMessenger
        codec:FLTDecibelSdkApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setDisableConsentsMsg:error:)], @"FLTDecibelSdkApi api (%@) doesn't respond to @selector(setDisableConsentsMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTConsentsMessage *arg_msg = args[0];
        FlutterError *error;
        [api setDisableConsentsMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DecibelSdkApi.saveScreenshot"
        binaryMessenger:binaryMessenger
        codec:FLTDecibelSdkApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(saveScreenshotMsg:error:)], @"FLTDecibelSdkApi api (%@) doesn't respond to @selector(saveScreenshotMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTScreenshotMessage *arg_msg = args[0];
        FlutterError *error;
        [api saveScreenshotMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DecibelSdkApi.sendDimensionWithString"
        binaryMessenger:binaryMessenger
        codec:FLTDecibelSdkApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendDimensionWithStringMsg:error:)], @"FLTDecibelSdkApi api (%@) doesn't respond to @selector(sendDimensionWithStringMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTDimensionStringMessage *arg_msg = args[0];
        FlutterError *error;
        [api sendDimensionWithStringMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DecibelSdkApi.sendDimensionWithNumber"
        binaryMessenger:binaryMessenger
        codec:FLTDecibelSdkApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendDimensionWithNumberMsg:error:)], @"FLTDecibelSdkApi api (%@) doesn't respond to @selector(sendDimensionWithNumberMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTDimensionNumberMessage *arg_msg = args[0];
        FlutterError *error;
        [api sendDimensionWithNumberMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DecibelSdkApi.sendDimensionWithBool"
        binaryMessenger:binaryMessenger
        codec:FLTDecibelSdkApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendDimensionWithBoolMsg:error:)], @"FLTDecibelSdkApi api (%@) doesn't respond to @selector(sendDimensionWithBoolMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTDimensionBoolMessage *arg_msg = args[0];
        FlutterError *error;
        [api sendDimensionWithBoolMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DecibelSdkApi.sendGoal"
        binaryMessenger:binaryMessenger
        codec:FLTDecibelSdkApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendGoalMsg:error:)], @"FLTDecibelSdkApi api (%@) doesn't respond to @selector(sendGoalMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTGoalMessage *arg_msg = args[0];
        FlutterError *error;
        [api sendGoalMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
