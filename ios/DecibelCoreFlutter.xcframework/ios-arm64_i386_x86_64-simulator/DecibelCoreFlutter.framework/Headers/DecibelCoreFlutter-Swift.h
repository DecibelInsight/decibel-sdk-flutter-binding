#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef DECIBELCOREFLUTTER_SWIFT_H
#define DECIBELCOREFLUTTER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DecibelCoreFlutter",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Enum for all possible currencies.
typedef SWIFT_ENUM(NSInteger, DecibelCurrency, open) {
  DecibelCurrencyAED = 0,
  DecibelCurrencyAFN = 1,
  DecibelCurrencyALL = 2,
  DecibelCurrencyAMD = 3,
  DecibelCurrencyANG = 4,
  DecibelCurrencyAOA = 5,
  DecibelCurrencyARS = 6,
  DecibelCurrencyAUD = 7,
  DecibelCurrencyAWG = 8,
  DecibelCurrencyAZN = 9,
  DecibelCurrencyBAM = 10,
  DecibelCurrencyBBD = 11,
  DecibelCurrencyBDT = 12,
  DecibelCurrencyBGN = 13,
  DecibelCurrencyBHD = 14,
  DecibelCurrencyBIF = 15,
  DecibelCurrencyBMD = 16,
  DecibelCurrencyBND = 17,
  DecibelCurrencyBOB = 18,
  DecibelCurrencyBOV = 19,
  DecibelCurrencyBRL = 20,
  DecibelCurrencyBSD = 21,
  DecibelCurrencyBTN = 22,
  DecibelCurrencyBWP = 23,
  DecibelCurrencyBYN = 24,
  DecibelCurrencyBZD = 25,
  DecibelCurrencyCAD = 26,
  DecibelCurrencyCDF = 27,
  DecibelCurrencyCHE = 28,
  DecibelCurrencyCHF = 29,
  DecibelCurrencyCHW = 30,
  DecibelCurrencyCLF = 31,
  DecibelCurrencyCLP = 32,
  DecibelCurrencyCNY = 33,
  DecibelCurrencyCOP = 34,
  DecibelCurrencyCOU = 35,
  DecibelCurrencyCRC = 36,
  DecibelCurrencyCUC = 37,
  DecibelCurrencyCUP = 38,
  DecibelCurrencyCVE = 39,
  DecibelCurrencyCZK = 40,
  DecibelCurrencyDJF = 41,
  DecibelCurrencyDKK = 42,
  DecibelCurrencyDOP = 43,
  DecibelCurrencyDZD = 44,
  DecibelCurrencyEGP = 45,
  DecibelCurrencyERN = 46,
  DecibelCurrencyETB = 47,
  DecibelCurrencyEUR = 48,
  DecibelCurrencyFJD = 49,
  DecibelCurrencyFKP = 50,
  DecibelCurrencyGBP = 51,
  DecibelCurrencyGEL = 52,
  DecibelCurrencyGHS = 53,
  DecibelCurrencyGIP = 54,
  DecibelCurrencyGMD = 55,
  DecibelCurrencyGNF = 56,
  DecibelCurrencyGTQ = 57,
  DecibelCurrencyGYD = 58,
  DecibelCurrencyHKD = 59,
  DecibelCurrencyHNL = 60,
  DecibelCurrencyHRK = 61,
  DecibelCurrencyHTG = 62,
  DecibelCurrencyHUF = 63,
  DecibelCurrencyIDR = 64,
  DecibelCurrencyILS = 65,
  DecibelCurrencyINR = 66,
  DecibelCurrencyIQD = 67,
  DecibelCurrencyIRR = 68,
  DecibelCurrencyISK = 69,
  DecibelCurrencyJMD = 70,
  DecibelCurrencyJOD = 71,
  DecibelCurrencyJPY = 72,
  DecibelCurrencyKES = 73,
  DecibelCurrencyKGS = 74,
  DecibelCurrencyKHR = 75,
  DecibelCurrencyKMF = 76,
  DecibelCurrencyKPW = 77,
  DecibelCurrencyKRW = 78,
  DecibelCurrencyKWD = 79,
  DecibelCurrencyKYD = 80,
  DecibelCurrencyKZT = 81,
  DecibelCurrencyLAK = 82,
  DecibelCurrencyLBP = 83,
  DecibelCurrencyLKR = 84,
  DecibelCurrencyLRD = 85,
  DecibelCurrencyLSL = 86,
  DecibelCurrencyLYD = 87,
  DecibelCurrencyMAD = 88,
  DecibelCurrencyMDL = 89,
  DecibelCurrencyMGA = 90,
  DecibelCurrencyMKD = 91,
  DecibelCurrencyMMK = 92,
  DecibelCurrencyMNT = 93,
  DecibelCurrencyMOP = 94,
  DecibelCurrencyMRU = 95,
  DecibelCurrencyMUR = 96,
  DecibelCurrencyMVR = 97,
  DecibelCurrencyMWK = 98,
  DecibelCurrencyMXN = 99,
  DecibelCurrencyMXV = 100,
  DecibelCurrencyMYR = 101,
  DecibelCurrencyMZN = 102,
  DecibelCurrencyNAD = 103,
  DecibelCurrencyNGN = 104,
  DecibelCurrencyNIO = 105,
  DecibelCurrencyNOK = 106,
  DecibelCurrencyNPR = 107,
  DecibelCurrencyNZD = 108,
  DecibelCurrencyOMR = 109,
  DecibelCurrencyPAB = 110,
  DecibelCurrencyPEN = 111,
  DecibelCurrencyPGK = 112,
  DecibelCurrencyPHP = 113,
  DecibelCurrencyPKR = 114,
  DecibelCurrencyPLN = 115,
  DecibelCurrencyPYG = 116,
  DecibelCurrencyQAR = 117,
  DecibelCurrencyRON = 118,
  DecibelCurrencyRSD = 119,
  DecibelCurrencyRUB = 120,
  DecibelCurrencyRWF = 121,
  DecibelCurrencySAR = 122,
  DecibelCurrencySBD = 123,
  DecibelCurrencySCR = 124,
  DecibelCurrencySDG = 125,
  DecibelCurrencySEK = 126,
  DecibelCurrencySGD = 127,
  DecibelCurrencySHP = 128,
  DecibelCurrencySLL = 129,
  DecibelCurrencySOS = 130,
  DecibelCurrencySRD = 131,
  DecibelCurrencySSP = 132,
  DecibelCurrencySTN = 133,
  DecibelCurrencySVC = 134,
  DecibelCurrencySYP = 135,
  DecibelCurrencySZL = 136,
  DecibelCurrencyTHB = 137,
  DecibelCurrencyTJS = 138,
  DecibelCurrencyTMT = 139,
  DecibelCurrencyTND = 140,
  DecibelCurrencyTOP = 141,
  DecibelCurrencyTRY = 142,
  DecibelCurrencyTTD = 143,
  DecibelCurrencyTWD = 144,
  DecibelCurrencyTZS = 145,
  DecibelCurrencyUAH = 146,
  DecibelCurrencyUGX = 147,
  DecibelCurrencyUSD = 148,
  DecibelCurrencyUSN = 149,
  DecibelCurrencyUYI = 150,
  DecibelCurrencyUYU = 151,
  DecibelCurrencyUYW = 152,
  DecibelCurrencyUZS = 153,
  DecibelCurrencyVES = 154,
  DecibelCurrencyVND = 155,
  DecibelCurrencyVUV = 156,
  DecibelCurrencyWST = 157,
  DecibelCurrencyXAF = 158,
  DecibelCurrencyXAG = 159,
  DecibelCurrencyXAU = 160,
  DecibelCurrencyXCD = 161,
  DecibelCurrencyXDR = 162,
  DecibelCurrencyXOF = 163,
  DecibelCurrencyXPD = 164,
  DecibelCurrencyXPF = 165,
  DecibelCurrencyXPT = 166,
  DecibelCurrencyXSU = 167,
  DecibelCurrencyXTS = 168,
  DecibelCurrencyXUA = 169,
  DecibelCurrencyXXX = 170,
  DecibelCurrencyYER = 171,
  DecibelCurrencyZAR = 172,
  DecibelCurrencyZMW = 173,
  DecibelCurrencyZWL = 174,
};


/// To obtain the link to the user session you have to use the DecibelSDK delegate method in the
/// didFinishLaunchingWithOptions method of your application class.
SWIFT_PROTOCOL("_TtP18DecibelCoreFlutter15DecibelDelegate_")
@protocol DecibelDelegate
/// This method is called when a new session id is generated.
/// \param sessionUrl contains the URL to access the session replay in the Decibel portal
///
- (void)getSessionURL:(NSString * _Nonnull)sessionUrl;
@end

enum SDKMaskAutomatic : NSInteger;
enum SDKLogLevel : NSInteger;
@class UIView;

SWIFT_PROTOCOL("_TtP18DecibelCoreFlutter15DecibelProtocol_")
@protocol DecibelProtocol
@property (nonatomic, strong) id <DecibelDelegate> _Nullable delegate;
/// Initialize the SDK and start recording events. This method don’t start recording
/// you must to call startRecording() or set(screen: String?) for this.
/// \param account Customer account.
///
/// \param property Account property.
///
- (void)initializeWithAccount:(NSString * _Nonnull)account property:(NSString * _Nonnull)property;
/// Initialize the SDK and start recording events. This method don’t start recording
/// you must to call startRecording() or set(screen: String?) for this. Check before start recording the consent that has been passed.
/// \param account Customer account.
///
/// \param property Account property.
///
/// \param consents Consent with which you want the app to start. If you pass .all all consents will be enabled by default, if you pass .none all consents will be disabled.
///
- (void)initializeWithAccount:(NSString * _Nonnull)account property:(NSString * _Nonnull)property consents:(NSArray<NSNumber *> * _Nonnull)consents;
/// This method set the screen for a new recorder cycle.
/// \param screen The name of screen.
///
- (void)setWithScreen:(NSString * _Nonnull)screen;
/// This method set masking for the current screen.
/// \param mask Automatic configuration of component mask.
///
- (void)setMaskingForCurrentScreenWithMask:(enum SDKMaskAutomatic)mask;
/// This method sends any goal defined by the user.
/// \param goal The name of the goal.
///
/// \param value The value of the goal.
///
/// \param currency The currency in which the goal is expressed.
///
- (void)sendWithGoal:(NSString * _Nonnull)goal with:(float)value currency:(enum DecibelCurrency)currency;
/// This method sends any goal defined by the user.
/// \param goal The name of the goal.
///
/// \param value The value of the goal.
///
- (void)sendWithGoal:(NSString * _Nonnull)goal with:(float)value;
/// This method sends any goal defined by the user.
/// \param goal The name of the goal.
///
- (void)sendWithGoal:(NSString * _Nonnull)goal;
/// This method sends any dimension defined by the user.
/// \param dimension The name of the dimension.
///
/// \param value The value specifies of the dimension.
///
- (void)sendWithDimension:(NSString * _Nonnull)dimension withString:(NSString * _Nonnull)value;
/// \param dimension The name of the dimension.
///
/// \param value The value specifies of the dimension.
///
- (void)sendWithDimension:(NSString * _Nonnull)dimension withBool:(BOOL)value;
/// \param dimension The name of the dimension.
///
/// \param value The value specifies of the dimension.
///
- (void)sendWithDimension:(NSString * _Nonnull)dimension withNumber:(double)value;
/// This method enables or disables session replay. By default it is enabled.
/// \param enabled parameter that enables or disables session replay.
///
- (void)enabledSessionReplay:(BOOL)enabled;
/// Settings to mask all visual components that are selected throughout the application.
/// \param configuration type of masking selected.
///
- (void)setAutomaticMask:(enum SDKMaskAutomatic)configuration;
/// Method to mask a CGRect.
/// \param rect CGRect that you want to mask.
///
- (void)maskWithRect:(CGRect)area;
/// Method to enable consents.
/// \param consents DecibelCustomerConsentTypes that you want to enable.
///
- (void)setEnableConsents:(NSArray<NSNumber *> * _Nonnull)consents;
/// Method to disable consents.
/// \param consents DecibelCustomerConsentTypes that you want to disable.
///
- (void)setDisableConsents:(NSArray<NSNumber *> * _Nonnull)consents;
/// Method set the log level.
/// \param level DecibelLogLevelType that you want to set.
///
- (void)setLogLevel:(enum SDKLogLevel)level;
/// Method to send the correct submission of the form.
- (void)formSuccess;
/// Method to submit an error in the form.
/// \param error Error description.
///
/// \param selector The component that fails.
///
- (void)formErrorWithError:(NSString * _Nonnull)error selector:(UIView * _Nullable)selector;
/// Add or remove session to get user experience.
/// \param enabled enable or disable user experience
///
- (void)enableSessionForExperience:(BOOL)enabled;
/// Add or remove sessions to get application data and user interactions.
/// \param enabled enable or disable application data and user interactions.
///
- (void)enableSessionForAnalysis:(BOOL)enabled;
/// Add or remove session to get session replay.
/// \param enabled enable or disable session replay.
///
- (void)enableSessionForReplay:(BOOL)enabled;
/// Add or remove screen to get application data and user interactions.
/// \param enabled enable or disable application data and user interactions.
///
- (void)enableScreenForAnalysis:(BOOL)enabled;
/// Method to get webviews URL properties.
- (NSString * _Nullable)getWebViewProperties SWIFT_WARN_UNUSED_RESULT;
/// Method to submit an error in the HTTP requests.
/// \param error Error code.
///
- (void)sendHTTPErrorWithStatusCode:(NSInteger)statusCode;
@end

@class SDKMultiPlatform;

SWIFT_PROTOCOL("_TtP18DecibelCoreFlutter20DecibelMultiPlatform_")
@protocol DecibelMultiPlatform <DecibelProtocol>
/// Initialize the SDK and start recording events. This method don’t start recording
/// you must to call startRecording() or set(screen: String?) for this.
/// \param account Customer account.
///
/// \param property Account property.
///
- (void)initializeWithAccount:(NSString * _Nonnull)account property:(NSString * _Nonnull)property multiPlatform:(SDKMultiPlatform * _Nonnull)multiPlatform;
/// Initialize the SDK and start recording events. This method don’t start recording
/// you must to call startRecording() or set(screen: String?) for this. Check before start recording the consent that has been passed.
/// \param account Customer account.
///
/// \param property Account property.
///
/// \param consents Consent with which you want the app to start. If you pass .all all consents will be enabled by default, if you pass .none all consents will be disabled.
///
- (void)initializeWithAccount:(NSString * _Nonnull)account property:(NSString * _Nonnull)property consents:(NSArray<NSNumber *> * _Nonnull)consents multiPlatform:(SDKMultiPlatform * _Nonnull)multiPlatform;
/// This method return the current session ID.
- (NSString * _Nullable)getSessionId SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP18DecibelCoreFlutter14DecibelFlutter_")
@protocol DecibelFlutter <DecibelMultiPlatform>
/// This method set the screen for a new recorder cycle.
/// \param screen The name of screen.
///
/// \param id Identifier screen.
///
/// \param fromBackground Bool if screen comes from background
///
- (void)setWithScreen:(NSString * _Nonnull)screen id:(NSInteger)id fromBackground:(BOOL)fromBackground;
/// This method set the screen for a new recorder cycle.
/// \param screenshot Screenshot <code>Data</code>.
///
/// \param id Identifier screen.
///
/// \param screenName The name of screen.
///
/// \param startFocusTime TimeInterval when sent the screenshot.
///
- (void)saveScreenShotWithScreenshot:(NSData * _Nonnull)screenshot id:(NSInteger)id screenName:(NSString * _Nonnull)screenName startFocusTime:(NSTimeInterval)startFocusTime;
/// This method ends the current screen.
/// \param goesToBackground Bool if screen goes to background
///
- (void)endScreenWithGoesToBackground:(BOOL)goesToBackground;
@end



@protocol SDKSettings;

SWIFT_CLASS("_TtC18DecibelCoreFlutter10DecibelSDK")
@interface DecibelSDK : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <DecibelFlutter> _Nonnull multiPlatform;)
+ (id <DecibelFlutter> _Nonnull)multiPlatform SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <SDKSettings> _Nonnull settings;)
+ (id <SDKSettings> _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum for enabling or disable consents.
typedef SWIFT_ENUM(NSInteger, DecibelUserConsent, open) {
  DecibelUserConsentAll = 0,
  DecibelUserConsentRecordingAndTracking = 1,
  DecibelUserConsentTracking = 2,
  DecibelUserConsentForm = 3,
  DecibelUserConsentNone = 4,
};




/// Enum for the SDK logs.
typedef SWIFT_ENUM(NSInteger, SDKLogLevel, open) {
  SDKLogLevelNone = 0,
  SDKLogLevelInfo = 1,
};

/// Enum for automatic masking components.
/// <ul>
///   <li>
///     <code>.labels</code>: all UILabel fields are masked.
///   </li>
///   <li>
///     <code>.inputs</code>: all UITextField and UITextView fields are masked.
///   </li>
///   <li>
///     <code>.images</code>: all UIImageView will be masked.
///   </li>
///   <li>
///     <code>.webViews</code>: all WKWebView are masked whole view. (no elements inside it).
///   </li>
///   <li>
///     <code>.forms</code>: the view containing the form components must be set to true the diFormTrack property and these components will be masked automatically.
///   </li>
///   <li>
///     <code>.all</code>: all case masks the rest of the cases (.labels, .inputs and .images).
///   </li>
///   <li>
///     <code>.noMask</code>: no masking anything.
///   </li>
///   <li>
///     <code>.unmaskInputs</code>: The Inputs are masking by default, with this option you can unmask all.
///   </li>
///   <li>
///     <code>.unmaskWebViews</code>: The WebView are masking by default, with this option you can unmask all.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SDKMaskAutomatic, open) {
/// All UILabel fields are masked
  SDKMaskAutomaticLabels = 0,
/// All UITextField and UITextView fields are masked, it’s masking by defdault.
  SDKMaskAutomaticInputs = 1,
/// All UIImageView will be masked.
  SDKMaskAutomaticImages = 2,
/// All WKWebView are masked whole view. (no elements inside it), it’s masking by defdault.
  SDKMaskAutomaticWebViews = 3,
/// The view containing the form components must be set to true the
/// diFormTrack property and these components will be masked automatically.
  SDKMaskAutomaticForms = 4,
/// All case masks the rest of the cases (.labels, .inputs and .images).
  SDKMaskAutomaticAll = 5,
/// No masking anything.
  SDKMaskAutomaticNoMask = 6,
/// The Inputs are masking by default, with this option you can unmask all.
  SDKMaskAutomaticUnmaskInputs = 7,
/// The WebView are masking by default, with this option you can unmask all.
  SDKMaskAutomaticUnmaskWebViews = 8,
};

typedef SWIFT_ENUM(NSInteger, SDKMaskView, open) {
  SDKMaskViewAutomatic = 0,
  SDKMaskViewMask = 1,
  SDKMaskViewUnmask = 2,
};


SWIFT_CLASS("_TtC18DecibelCoreFlutter16SDKMultiPlatform")
@interface SDKMultiPlatform : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SDKPlatformType, open) {
  SDKPlatformTypeFlutter = 0,
  SDKPlatformTypeXamarin = 1,
};

/// Defines the behaviour of choosing screens to record or choosing which will not be recorded.
/// <ul>
///   <li>
///     <code>.defineScreensToRecord</code>: this mode will not record any screen by default.
///     To record a specific screen, it must be defined within the screen that you want to record.
///   </li>
///   <li>
///     <code>.defineScreensToStopRecord</code>: this mode records all screens by default. If it is required not to record a specific screen,
///     it must be specified on the screen.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SDKRecordingMode, open) {
  SDKRecordingModeDefineScreensToRecord = 0,
  SDKRecordingModeDefineScreensToStopRecord = 1,
};

/// Defines the behaviour of video recording. There are three modes.
/// <ul>
///   <li>
///     <code>record</code>:  with this option in the main view on a view controller the screen will not be recorded. It is only necessary when
///     the recordingMode is .defineScreensToStopRecord.
///   </li>
///   <li>
///     <code>noRecord</code>:  with this option in the main view on a view controller the screen will be recorded. It is only necessary when
///     the recordingMode is .defineScreensToRecord.
///   </li>
///   <li>
///     <code>undefined</code>: this is the default option. This screen will be recorded depending on the value of recordingMode. In the
///     case of .defineScreensToRecord the screen will not be recorded and with the case of .defineScreensToStopRecord the screen will be recorded.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SDKRecordingScreen, open) {
  SDKRecordingScreenRecord = 0,
  SDKRecordingScreenNoRecord = 1,
  SDKRecordingScreenUndefined = 2,
};

/// Defines the type of session replay that we want to see from the user. There are three modes:
/// <ul>
///   <li>
///     <code>.hiFi</code>: for this case it will be a replay session with great definition. All components will be recorded.
///     It is not recommended to use this method in the case of masking some components.
///   </li>
///   <li>
///     <code>.loFi</code>: this mode will record the screen in low fidelity. Not all components will be recorded as shown on the
///     screen but it can be used to give us an idea of what the screen looks like. This mode is recommended for screens that have some masking.
///   </li>
///   <li>
///     <code>.automatic</code>: in this case the type is selected automatically, being High fidelity in all the screens that do not contain
///     masks and Low fidelity in those that contain some component to mask.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SDKSessionReplayType, open) {
  SDKSessionReplayTypeHiFi = 0,
  SDKSessionReplayTypeLoFi = 1,
  SDKSessionReplayTypeAutomatic = 2,
};


SWIFT_PROTOCOL("_TtP18DecibelCoreFlutter11SDKSettings_")
@protocol SDKSettings
/// Property to change the settings for sending the data. With a true value, the data is sent both by
/// Wi-Fi and mobile data.
@property (nonatomic) BOOL mobileDataEnable;
/// Enable/Disable Crash Reporter feature.
@property (nonatomic) BOOL crashReporterEnable;
/// Defines the behaviour of video recording. There are two modes.
/// note:
/// <code>.defineScreensToStopRecord</code>: This mode records all screens by default. If it is required not to
/// record a specific screen, it must be specified on the screen. This mode is enabled by default.
/// <ul>
///   <li>
///     <code>.defineScreensToRecord</code>: This mode will not record any screen by default.
///     To record a specific screen, it must be defined within the screen that you want to record.
///   </li>
/// </ul>
@property (nonatomic) enum SDKRecordingMode recordingMode;
/// Defines the type of session replay that we want to see from the user. There are four modes:
/// <ul>
///   <li>
///     <code>.hiFi</code>: For this case it will be a replay session with great definition.
///     All components will be recorded. It is not recommended to use this method in the case of masking some components.
///   </li>
///   <li>
///     <code>.loFi</code>: This mode will record the screen in low fidelity. Not all components will be recorded as shown
///     on the screen but it can be used to give us an idea of what the screen looks like.
///     This mode is recommended for screens that have some masking.
///   </li>
///   <li>
///     <code>.automatic</code>: In this case the type is selected automatically, being High fidelity in all the screens that do not
///     contain masks and Low fidelity in those that contain some component to mask.
///   </li>
/// </ul>
@property (nonatomic) enum SDKSessionReplayType sessionReplayType;
@end















@interface UIView (SWIFT_EXTENSION(DecibelCoreFlutter))
@property (nonatomic) enum SDKMaskView diMasking;
@property (nonatomic) BOOL diFormTrack;
@property (nonatomic) enum SDKRecordingScreen diAddScreenForRecording;
@property (nonatomic) enum SDKSessionReplayType diSessionReplayType;
@end


@interface UIViewController (SWIFT_EXTENSION(DecibelCoreFlutter))
@property (nonatomic, copy) NSString * _Nullable diScreenName;
@end







#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef DECIBELCOREFLUTTER_SWIFT_H
#define DECIBELCOREFLUTTER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DecibelCoreFlutter",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Enum for all possible currencies.
typedef SWIFT_ENUM(NSInteger, DecibelCurrency, open) {
  DecibelCurrencyAED = 0,
  DecibelCurrencyAFN = 1,
  DecibelCurrencyALL = 2,
  DecibelCurrencyAMD = 3,
  DecibelCurrencyANG = 4,
  DecibelCurrencyAOA = 5,
  DecibelCurrencyARS = 6,
  DecibelCurrencyAUD = 7,
  DecibelCurrencyAWG = 8,
  DecibelCurrencyAZN = 9,
  DecibelCurrencyBAM = 10,
  DecibelCurrencyBBD = 11,
  DecibelCurrencyBDT = 12,
  DecibelCurrencyBGN = 13,
  DecibelCurrencyBHD = 14,
  DecibelCurrencyBIF = 15,
  DecibelCurrencyBMD = 16,
  DecibelCurrencyBND = 17,
  DecibelCurrencyBOB = 18,
  DecibelCurrencyBOV = 19,
  DecibelCurrencyBRL = 20,
  DecibelCurrencyBSD = 21,
  DecibelCurrencyBTN = 22,
  DecibelCurrencyBWP = 23,
  DecibelCurrencyBYN = 24,
  DecibelCurrencyBZD = 25,
  DecibelCurrencyCAD = 26,
  DecibelCurrencyCDF = 27,
  DecibelCurrencyCHE = 28,
  DecibelCurrencyCHF = 29,
  DecibelCurrencyCHW = 30,
  DecibelCurrencyCLF = 31,
  DecibelCurrencyCLP = 32,
  DecibelCurrencyCNY = 33,
  DecibelCurrencyCOP = 34,
  DecibelCurrencyCOU = 35,
  DecibelCurrencyCRC = 36,
  DecibelCurrencyCUC = 37,
  DecibelCurrencyCUP = 38,
  DecibelCurrencyCVE = 39,
  DecibelCurrencyCZK = 40,
  DecibelCurrencyDJF = 41,
  DecibelCurrencyDKK = 42,
  DecibelCurrencyDOP = 43,
  DecibelCurrencyDZD = 44,
  DecibelCurrencyEGP = 45,
  DecibelCurrencyERN = 46,
  DecibelCurrencyETB = 47,
  DecibelCurrencyEUR = 48,
  DecibelCurrencyFJD = 49,
  DecibelCurrencyFKP = 50,
  DecibelCurrencyGBP = 51,
  DecibelCurrencyGEL = 52,
  DecibelCurrencyGHS = 53,
  DecibelCurrencyGIP = 54,
  DecibelCurrencyGMD = 55,
  DecibelCurrencyGNF = 56,
  DecibelCurrencyGTQ = 57,
  DecibelCurrencyGYD = 58,
  DecibelCurrencyHKD = 59,
  DecibelCurrencyHNL = 60,
  DecibelCurrencyHRK = 61,
  DecibelCurrencyHTG = 62,
  DecibelCurrencyHUF = 63,
  DecibelCurrencyIDR = 64,
  DecibelCurrencyILS = 65,
  DecibelCurrencyINR = 66,
  DecibelCurrencyIQD = 67,
  DecibelCurrencyIRR = 68,
  DecibelCurrencyISK = 69,
  DecibelCurrencyJMD = 70,
  DecibelCurrencyJOD = 71,
  DecibelCurrencyJPY = 72,
  DecibelCurrencyKES = 73,
  DecibelCurrencyKGS = 74,
  DecibelCurrencyKHR = 75,
  DecibelCurrencyKMF = 76,
  DecibelCurrencyKPW = 77,
  DecibelCurrencyKRW = 78,
  DecibelCurrencyKWD = 79,
  DecibelCurrencyKYD = 80,
  DecibelCurrencyKZT = 81,
  DecibelCurrencyLAK = 82,
  DecibelCurrencyLBP = 83,
  DecibelCurrencyLKR = 84,
  DecibelCurrencyLRD = 85,
  DecibelCurrencyLSL = 86,
  DecibelCurrencyLYD = 87,
  DecibelCurrencyMAD = 88,
  DecibelCurrencyMDL = 89,
  DecibelCurrencyMGA = 90,
  DecibelCurrencyMKD = 91,
  DecibelCurrencyMMK = 92,
  DecibelCurrencyMNT = 93,
  DecibelCurrencyMOP = 94,
  DecibelCurrencyMRU = 95,
  DecibelCurrencyMUR = 96,
  DecibelCurrencyMVR = 97,
  DecibelCurrencyMWK = 98,
  DecibelCurrencyMXN = 99,
  DecibelCurrencyMXV = 100,
  DecibelCurrencyMYR = 101,
  DecibelCurrencyMZN = 102,
  DecibelCurrencyNAD = 103,
  DecibelCurrencyNGN = 104,
  DecibelCurrencyNIO = 105,
  DecibelCurrencyNOK = 106,
  DecibelCurrencyNPR = 107,
  DecibelCurrencyNZD = 108,
  DecibelCurrencyOMR = 109,
  DecibelCurrencyPAB = 110,
  DecibelCurrencyPEN = 111,
  DecibelCurrencyPGK = 112,
  DecibelCurrencyPHP = 113,
  DecibelCurrencyPKR = 114,
  DecibelCurrencyPLN = 115,
  DecibelCurrencyPYG = 116,
  DecibelCurrencyQAR = 117,
  DecibelCurrencyRON = 118,
  DecibelCurrencyRSD = 119,
  DecibelCurrencyRUB = 120,
  DecibelCurrencyRWF = 121,
  DecibelCurrencySAR = 122,
  DecibelCurrencySBD = 123,
  DecibelCurrencySCR = 124,
  DecibelCurrencySDG = 125,
  DecibelCurrencySEK = 126,
  DecibelCurrencySGD = 127,
  DecibelCurrencySHP = 128,
  DecibelCurrencySLL = 129,
  DecibelCurrencySOS = 130,
  DecibelCurrencySRD = 131,
  DecibelCurrencySSP = 132,
  DecibelCurrencySTN = 133,
  DecibelCurrencySVC = 134,
  DecibelCurrencySYP = 135,
  DecibelCurrencySZL = 136,
  DecibelCurrencyTHB = 137,
  DecibelCurrencyTJS = 138,
  DecibelCurrencyTMT = 139,
  DecibelCurrencyTND = 140,
  DecibelCurrencyTOP = 141,
  DecibelCurrencyTRY = 142,
  DecibelCurrencyTTD = 143,
  DecibelCurrencyTWD = 144,
  DecibelCurrencyTZS = 145,
  DecibelCurrencyUAH = 146,
  DecibelCurrencyUGX = 147,
  DecibelCurrencyUSD = 148,
  DecibelCurrencyUSN = 149,
  DecibelCurrencyUYI = 150,
  DecibelCurrencyUYU = 151,
  DecibelCurrencyUYW = 152,
  DecibelCurrencyUZS = 153,
  DecibelCurrencyVES = 154,
  DecibelCurrencyVND = 155,
  DecibelCurrencyVUV = 156,
  DecibelCurrencyWST = 157,
  DecibelCurrencyXAF = 158,
  DecibelCurrencyXAG = 159,
  DecibelCurrencyXAU = 160,
  DecibelCurrencyXCD = 161,
  DecibelCurrencyXDR = 162,
  DecibelCurrencyXOF = 163,
  DecibelCurrencyXPD = 164,
  DecibelCurrencyXPF = 165,
  DecibelCurrencyXPT = 166,
  DecibelCurrencyXSU = 167,
  DecibelCurrencyXTS = 168,
  DecibelCurrencyXUA = 169,
  DecibelCurrencyXXX = 170,
  DecibelCurrencyYER = 171,
  DecibelCurrencyZAR = 172,
  DecibelCurrencyZMW = 173,
  DecibelCurrencyZWL = 174,
};


/// To obtain the link to the user session you have to use the DecibelSDK delegate method in the
/// didFinishLaunchingWithOptions method of your application class.
SWIFT_PROTOCOL("_TtP18DecibelCoreFlutter15DecibelDelegate_")
@protocol DecibelDelegate
/// This method is called when a new session id is generated.
/// \param sessionUrl contains the URL to access the session replay in the Decibel portal
///
- (void)getSessionURL:(NSString * _Nonnull)sessionUrl;
@end

enum SDKMaskAutomatic : NSInteger;
enum SDKLogLevel : NSInteger;
@class UIView;

SWIFT_PROTOCOL("_TtP18DecibelCoreFlutter15DecibelProtocol_")
@protocol DecibelProtocol
@property (nonatomic, strong) id <DecibelDelegate> _Nullable delegate;
/// Initialize the SDK and start recording events. This method don’t start recording
/// you must to call startRecording() or set(screen: String?) for this.
/// \param account Customer account.
///
/// \param property Account property.
///
- (void)initializeWithAccount:(NSString * _Nonnull)account property:(NSString * _Nonnull)property;
/// Initialize the SDK and start recording events. This method don’t start recording
/// you must to call startRecording() or set(screen: String?) for this. Check before start recording the consent that has been passed.
/// \param account Customer account.
///
/// \param property Account property.
///
/// \param consents Consent with which you want the app to start. If you pass .all all consents will be enabled by default, if you pass .none all consents will be disabled.
///
- (void)initializeWithAccount:(NSString * _Nonnull)account property:(NSString * _Nonnull)property consents:(NSArray<NSNumber *> * _Nonnull)consents;
/// This method set the screen for a new recorder cycle.
/// \param screen The name of screen.
///
- (void)setWithScreen:(NSString * _Nonnull)screen;
/// This method set masking for the current screen.
/// \param mask Automatic configuration of component mask.
///
- (void)setMaskingForCurrentScreenWithMask:(enum SDKMaskAutomatic)mask;
/// This method sends any goal defined by the user.
/// \param goal The name of the goal.
///
/// \param value The value of the goal.
///
/// \param currency The currency in which the goal is expressed.
///
- (void)sendWithGoal:(NSString * _Nonnull)goal with:(float)value currency:(enum DecibelCurrency)currency;
/// This method sends any goal defined by the user.
/// \param goal The name of the goal.
///
/// \param value The value of the goal.
///
- (void)sendWithGoal:(NSString * _Nonnull)goal with:(float)value;
/// This method sends any goal defined by the user.
/// \param goal The name of the goal.
///
- (void)sendWithGoal:(NSString * _Nonnull)goal;
/// This method sends any dimension defined by the user.
/// \param dimension The name of the dimension.
///
/// \param value The value specifies of the dimension.
///
- (void)sendWithDimension:(NSString * _Nonnull)dimension withString:(NSString * _Nonnull)value;
/// \param dimension The name of the dimension.
///
/// \param value The value specifies of the dimension.
///
- (void)sendWithDimension:(NSString * _Nonnull)dimension withBool:(BOOL)value;
/// \param dimension The name of the dimension.
///
/// \param value The value specifies of the dimension.
///
- (void)sendWithDimension:(NSString * _Nonnull)dimension withNumber:(double)value;
/// This method enables or disables session replay. By default it is enabled.
/// \param enabled parameter that enables or disables session replay.
///
- (void)enabledSessionReplay:(BOOL)enabled;
/// Settings to mask all visual components that are selected throughout the application.
/// \param configuration type of masking selected.
///
- (void)setAutomaticMask:(enum SDKMaskAutomatic)configuration;
/// Method to mask a CGRect.
/// \param rect CGRect that you want to mask.
///
- (void)maskWithRect:(CGRect)area;
/// Method to enable consents.
/// \param consents DecibelCustomerConsentTypes that you want to enable.
///
- (void)setEnableConsents:(NSArray<NSNumber *> * _Nonnull)consents;
/// Method to disable consents.
/// \param consents DecibelCustomerConsentTypes that you want to disable.
///
- (void)setDisableConsents:(NSArray<NSNumber *> * _Nonnull)consents;
/// Method set the log level.
/// \param level DecibelLogLevelType that you want to set.
///
- (void)setLogLevel:(enum SDKLogLevel)level;
/// Method to send the correct submission of the form.
- (void)formSuccess;
/// Method to submit an error in the form.
/// \param error Error description.
///
/// \param selector The component that fails.
///
- (void)formErrorWithError:(NSString * _Nonnull)error selector:(UIView * _Nullable)selector;
/// Add or remove session to get user experience.
/// \param enabled enable or disable user experience
///
- (void)enableSessionForExperience:(BOOL)enabled;
/// Add or remove sessions to get application data and user interactions.
/// \param enabled enable or disable application data and user interactions.
///
- (void)enableSessionForAnalysis:(BOOL)enabled;
/// Add or remove session to get session replay.
/// \param enabled enable or disable session replay.
///
- (void)enableSessionForReplay:(BOOL)enabled;
/// Add or remove screen to get application data and user interactions.
/// \param enabled enable or disable application data and user interactions.
///
- (void)enableScreenForAnalysis:(BOOL)enabled;
/// Method to get webviews URL properties.
- (NSString * _Nullable)getWebViewProperties SWIFT_WARN_UNUSED_RESULT;
/// Method to submit an error in the HTTP requests.
/// \param error Error code.
///
- (void)sendHTTPErrorWithStatusCode:(NSInteger)statusCode;
@end

@class SDKMultiPlatform;

SWIFT_PROTOCOL("_TtP18DecibelCoreFlutter20DecibelMultiPlatform_")
@protocol DecibelMultiPlatform <DecibelProtocol>
/// Initialize the SDK and start recording events. This method don’t start recording
/// you must to call startRecording() or set(screen: String?) for this.
/// \param account Customer account.
///
/// \param property Account property.
///
- (void)initializeWithAccount:(NSString * _Nonnull)account property:(NSString * _Nonnull)property multiPlatform:(SDKMultiPlatform * _Nonnull)multiPlatform;
/// Initialize the SDK and start recording events. This method don’t start recording
/// you must to call startRecording() or set(screen: String?) for this. Check before start recording the consent that has been passed.
/// \param account Customer account.
///
/// \param property Account property.
///
/// \param consents Consent with which you want the app to start. If you pass .all all consents will be enabled by default, if you pass .none all consents will be disabled.
///
- (void)initializeWithAccount:(NSString * _Nonnull)account property:(NSString * _Nonnull)property consents:(NSArray<NSNumber *> * _Nonnull)consents multiPlatform:(SDKMultiPlatform * _Nonnull)multiPlatform;
/// This method return the current session ID.
- (NSString * _Nullable)getSessionId SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP18DecibelCoreFlutter14DecibelFlutter_")
@protocol DecibelFlutter <DecibelMultiPlatform>
/// This method set the screen for a new recorder cycle.
/// \param screen The name of screen.
///
/// \param id Identifier screen.
///
/// \param fromBackground Bool if screen comes from background
///
- (void)setWithScreen:(NSString * _Nonnull)screen id:(NSInteger)id fromBackground:(BOOL)fromBackground;
/// This method set the screen for a new recorder cycle.
/// \param screenshot Screenshot <code>Data</code>.
///
/// \param id Identifier screen.
///
/// \param screenName The name of screen.
///
/// \param startFocusTime TimeInterval when sent the screenshot.
///
- (void)saveScreenShotWithScreenshot:(NSData * _Nonnull)screenshot id:(NSInteger)id screenName:(NSString * _Nonnull)screenName startFocusTime:(NSTimeInterval)startFocusTime;
/// This method ends the current screen.
/// \param goesToBackground Bool if screen goes to background
///
- (void)endScreenWithGoesToBackground:(BOOL)goesToBackground;
@end



@protocol SDKSettings;

SWIFT_CLASS("_TtC18DecibelCoreFlutter10DecibelSDK")
@interface DecibelSDK : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <DecibelFlutter> _Nonnull multiPlatform;)
+ (id <DecibelFlutter> _Nonnull)multiPlatform SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <SDKSettings> _Nonnull settings;)
+ (id <SDKSettings> _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum for enabling or disable consents.
typedef SWIFT_ENUM(NSInteger, DecibelUserConsent, open) {
  DecibelUserConsentAll = 0,
  DecibelUserConsentRecordingAndTracking = 1,
  DecibelUserConsentTracking = 2,
  DecibelUserConsentForm = 3,
  DecibelUserConsentNone = 4,
};




/// Enum for the SDK logs.
typedef SWIFT_ENUM(NSInteger, SDKLogLevel, open) {
  SDKLogLevelNone = 0,
  SDKLogLevelInfo = 1,
};

/// Enum for automatic masking components.
/// <ul>
///   <li>
///     <code>.labels</code>: all UILabel fields are masked.
///   </li>
///   <li>
///     <code>.inputs</code>: all UITextField and UITextView fields are masked.
///   </li>
///   <li>
///     <code>.images</code>: all UIImageView will be masked.
///   </li>
///   <li>
///     <code>.webViews</code>: all WKWebView are masked whole view. (no elements inside it).
///   </li>
///   <li>
///     <code>.forms</code>: the view containing the form components must be set to true the diFormTrack property and these components will be masked automatically.
///   </li>
///   <li>
///     <code>.all</code>: all case masks the rest of the cases (.labels, .inputs and .images).
///   </li>
///   <li>
///     <code>.noMask</code>: no masking anything.
///   </li>
///   <li>
///     <code>.unmaskInputs</code>: The Inputs are masking by default, with this option you can unmask all.
///   </li>
///   <li>
///     <code>.unmaskWebViews</code>: The WebView are masking by default, with this option you can unmask all.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SDKMaskAutomatic, open) {
/// All UILabel fields are masked
  SDKMaskAutomaticLabels = 0,
/// All UITextField and UITextView fields are masked, it’s masking by defdault.
  SDKMaskAutomaticInputs = 1,
/// All UIImageView will be masked.
  SDKMaskAutomaticImages = 2,
/// All WKWebView are masked whole view. (no elements inside it), it’s masking by defdault.
  SDKMaskAutomaticWebViews = 3,
/// The view containing the form components must be set to true the
/// diFormTrack property and these components will be masked automatically.
  SDKMaskAutomaticForms = 4,
/// All case masks the rest of the cases (.labels, .inputs and .images).
  SDKMaskAutomaticAll = 5,
/// No masking anything.
  SDKMaskAutomaticNoMask = 6,
/// The Inputs are masking by default, with this option you can unmask all.
  SDKMaskAutomaticUnmaskInputs = 7,
/// The WebView are masking by default, with this option you can unmask all.
  SDKMaskAutomaticUnmaskWebViews = 8,
};

typedef SWIFT_ENUM(NSInteger, SDKMaskView, open) {
  SDKMaskViewAutomatic = 0,
  SDKMaskViewMask = 1,
  SDKMaskViewUnmask = 2,
};


SWIFT_CLASS("_TtC18DecibelCoreFlutter16SDKMultiPlatform")
@interface SDKMultiPlatform : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SDKPlatformType, open) {
  SDKPlatformTypeFlutter = 0,
  SDKPlatformTypeXamarin = 1,
};

/// Defines the behaviour of choosing screens to record or choosing which will not be recorded.
/// <ul>
///   <li>
///     <code>.defineScreensToRecord</code>: this mode will not record any screen by default.
///     To record a specific screen, it must be defined within the screen that you want to record.
///   </li>
///   <li>
///     <code>.defineScreensToStopRecord</code>: this mode records all screens by default. If it is required not to record a specific screen,
///     it must be specified on the screen.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SDKRecordingMode, open) {
  SDKRecordingModeDefineScreensToRecord = 0,
  SDKRecordingModeDefineScreensToStopRecord = 1,
};

/// Defines the behaviour of video recording. There are three modes.
/// <ul>
///   <li>
///     <code>record</code>:  with this option in the main view on a view controller the screen will not be recorded. It is only necessary when
///     the recordingMode is .defineScreensToStopRecord.
///   </li>
///   <li>
///     <code>noRecord</code>:  with this option in the main view on a view controller the screen will be recorded. It is only necessary when
///     the recordingMode is .defineScreensToRecord.
///   </li>
///   <li>
///     <code>undefined</code>: this is the default option. This screen will be recorded depending on the value of recordingMode. In the
///     case of .defineScreensToRecord the screen will not be recorded and with the case of .defineScreensToStopRecord the screen will be recorded.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SDKRecordingScreen, open) {
  SDKRecordingScreenRecord = 0,
  SDKRecordingScreenNoRecord = 1,
  SDKRecordingScreenUndefined = 2,
};

/// Defines the type of session replay that we want to see from the user. There are three modes:
/// <ul>
///   <li>
///     <code>.hiFi</code>: for this case it will be a replay session with great definition. All components will be recorded.
///     It is not recommended to use this method in the case of masking some components.
///   </li>
///   <li>
///     <code>.loFi</code>: this mode will record the screen in low fidelity. Not all components will be recorded as shown on the
///     screen but it can be used to give us an idea of what the screen looks like. This mode is recommended for screens that have some masking.
///   </li>
///   <li>
///     <code>.automatic</code>: in this case the type is selected automatically, being High fidelity in all the screens that do not contain
///     masks and Low fidelity in those that contain some component to mask.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SDKSessionReplayType, open) {
  SDKSessionReplayTypeHiFi = 0,
  SDKSessionReplayTypeLoFi = 1,
  SDKSessionReplayTypeAutomatic = 2,
};


SWIFT_PROTOCOL("_TtP18DecibelCoreFlutter11SDKSettings_")
@protocol SDKSettings
/// Property to change the settings for sending the data. With a true value, the data is sent both by
/// Wi-Fi and mobile data.
@property (nonatomic) BOOL mobileDataEnable;
/// Enable/Disable Crash Reporter feature.
@property (nonatomic) BOOL crashReporterEnable;
/// Defines the behaviour of video recording. There are two modes.
/// note:
/// <code>.defineScreensToStopRecord</code>: This mode records all screens by default. If it is required not to
/// record a specific screen, it must be specified on the screen. This mode is enabled by default.
/// <ul>
///   <li>
///     <code>.defineScreensToRecord</code>: This mode will not record any screen by default.
///     To record a specific screen, it must be defined within the screen that you want to record.
///   </li>
/// </ul>
@property (nonatomic) enum SDKRecordingMode recordingMode;
/// Defines the type of session replay that we want to see from the user. There are four modes:
/// <ul>
///   <li>
///     <code>.hiFi</code>: For this case it will be a replay session with great definition.
///     All components will be recorded. It is not recommended to use this method in the case of masking some components.
///   </li>
///   <li>
///     <code>.loFi</code>: This mode will record the screen in low fidelity. Not all components will be recorded as shown
///     on the screen but it can be used to give us an idea of what the screen looks like.
///     This mode is recommended for screens that have some masking.
///   </li>
///   <li>
///     <code>.automatic</code>: In this case the type is selected automatically, being High fidelity in all the screens that do not
///     contain masks and Low fidelity in those that contain some component to mask.
///   </li>
/// </ul>
@property (nonatomic) enum SDKSessionReplayType sessionReplayType;
@end















@interface UIView (SWIFT_EXTENSION(DecibelCoreFlutter))
@property (nonatomic) enum SDKMaskView diMasking;
@property (nonatomic) BOOL diFormTrack;
@property (nonatomic) enum SDKRecordingScreen diAddScreenForRecording;
@property (nonatomic) enum SDKSessionReplayType diSessionReplayType;
@end


@interface UIViewController (SWIFT_EXTENSION(DecibelCoreFlutter))
@property (nonatomic, copy) NSString * _Nullable diScreenName;
@end







#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef DECIBELCOREFLUTTER_SWIFT_H
#define DECIBELCOREFLUTTER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DecibelCoreFlutter",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Enum for all possible currencies.
typedef SWIFT_ENUM(NSInteger, DecibelCurrency, open) {
  DecibelCurrencyAED = 0,
  DecibelCurrencyAFN = 1,
  DecibelCurrencyALL = 2,
  DecibelCurrencyAMD = 3,
  DecibelCurrencyANG = 4,
  DecibelCurrencyAOA = 5,
  DecibelCurrencyARS = 6,
  DecibelCurrencyAUD = 7,
  DecibelCurrencyAWG = 8,
  DecibelCurrencyAZN = 9,
  DecibelCurrencyBAM = 10,
  DecibelCurrencyBBD = 11,
  DecibelCurrencyBDT = 12,
  DecibelCurrencyBGN = 13,
  DecibelCurrencyBHD = 14,
  DecibelCurrencyBIF = 15,
  DecibelCurrencyBMD = 16,
  DecibelCurrencyBND = 17,
  DecibelCurrencyBOB = 18,
  DecibelCurrencyBOV = 19,
  DecibelCurrencyBRL = 20,
  DecibelCurrencyBSD = 21,
  DecibelCurrencyBTN = 22,
  DecibelCurrencyBWP = 23,
  DecibelCurrencyBYN = 24,
  DecibelCurrencyBZD = 25,
  DecibelCurrencyCAD = 26,
  DecibelCurrencyCDF = 27,
  DecibelCurrencyCHE = 28,
  DecibelCurrencyCHF = 29,
  DecibelCurrencyCHW = 30,
  DecibelCurrencyCLF = 31,
  DecibelCurrencyCLP = 32,
  DecibelCurrencyCNY = 33,
  DecibelCurrencyCOP = 34,
  DecibelCurrencyCOU = 35,
  DecibelCurrencyCRC = 36,
  DecibelCurrencyCUC = 37,
  DecibelCurrencyCUP = 38,
  DecibelCurrencyCVE = 39,
  DecibelCurrencyCZK = 40,
  DecibelCurrencyDJF = 41,
  DecibelCurrencyDKK = 42,
  DecibelCurrencyDOP = 43,
  DecibelCurrencyDZD = 44,
  DecibelCurrencyEGP = 45,
  DecibelCurrencyERN = 46,
  DecibelCurrencyETB = 47,
  DecibelCurrencyEUR = 48,
  DecibelCurrencyFJD = 49,
  DecibelCurrencyFKP = 50,
  DecibelCurrencyGBP = 51,
  DecibelCurrencyGEL = 52,
  DecibelCurrencyGHS = 53,
  DecibelCurrencyGIP = 54,
  DecibelCurrencyGMD = 55,
  DecibelCurrencyGNF = 56,
  DecibelCurrencyGTQ = 57,
  DecibelCurrencyGYD = 58,
  DecibelCurrencyHKD = 59,
  DecibelCurrencyHNL = 60,
  DecibelCurrencyHRK = 61,
  DecibelCurrencyHTG = 62,
  DecibelCurrencyHUF = 63,
  DecibelCurrencyIDR = 64,
  DecibelCurrencyILS = 65,
  DecibelCurrencyINR = 66,
  DecibelCurrencyIQD = 67,
  DecibelCurrencyIRR = 68,
  DecibelCurrencyISK = 69,
  DecibelCurrencyJMD = 70,
  DecibelCurrencyJOD = 71,
  DecibelCurrencyJPY = 72,
  DecibelCurrencyKES = 73,
  DecibelCurrencyKGS = 74,
  DecibelCurrencyKHR = 75,
  DecibelCurrencyKMF = 76,
  DecibelCurrencyKPW = 77,
  DecibelCurrencyKRW = 78,
  DecibelCurrencyKWD = 79,
  DecibelCurrencyKYD = 80,
  DecibelCurrencyKZT = 81,
  DecibelCurrencyLAK = 82,
  DecibelCurrencyLBP = 83,
  DecibelCurrencyLKR = 84,
  DecibelCurrencyLRD = 85,
  DecibelCurrencyLSL = 86,
  DecibelCurrencyLYD = 87,
  DecibelCurrencyMAD = 88,
  DecibelCurrencyMDL = 89,
  DecibelCurrencyMGA = 90,
  DecibelCurrencyMKD = 91,
  DecibelCurrencyMMK = 92,
  DecibelCurrencyMNT = 93,
  DecibelCurrencyMOP = 94,
  DecibelCurrencyMRU = 95,
  DecibelCurrencyMUR = 96,
  DecibelCurrencyMVR = 97,
  DecibelCurrencyMWK = 98,
  DecibelCurrencyMXN = 99,
  DecibelCurrencyMXV = 100,
  DecibelCurrencyMYR = 101,
  DecibelCurrencyMZN = 102,
  DecibelCurrencyNAD = 103,
  DecibelCurrencyNGN = 104,
  DecibelCurrencyNIO = 105,
  DecibelCurrencyNOK = 106,
  DecibelCurrencyNPR = 107,
  DecibelCurrencyNZD = 108,
  DecibelCurrencyOMR = 109,
  DecibelCurrencyPAB = 110,
  DecibelCurrencyPEN = 111,
  DecibelCurrencyPGK = 112,
  DecibelCurrencyPHP = 113,
  DecibelCurrencyPKR = 114,
  DecibelCurrencyPLN = 115,
  DecibelCurrencyPYG = 116,
  DecibelCurrencyQAR = 117,
  DecibelCurrencyRON = 118,
  DecibelCurrencyRSD = 119,
  DecibelCurrencyRUB = 120,
  DecibelCurrencyRWF = 121,
  DecibelCurrencySAR = 122,
  DecibelCurrencySBD = 123,
  DecibelCurrencySCR = 124,
  DecibelCurrencySDG = 125,
  DecibelCurrencySEK = 126,
  DecibelCurrencySGD = 127,
  DecibelCurrencySHP = 128,
  DecibelCurrencySLL = 129,
  DecibelCurrencySOS = 130,
  DecibelCurrencySRD = 131,
  DecibelCurrencySSP = 132,
  DecibelCurrencySTN = 133,
  DecibelCurrencySVC = 134,
  DecibelCurrencySYP = 135,
  DecibelCurrencySZL = 136,
  DecibelCurrencyTHB = 137,
  DecibelCurrencyTJS = 138,
  DecibelCurrencyTMT = 139,
  DecibelCurrencyTND = 140,
  DecibelCurrencyTOP = 141,
  DecibelCurrencyTRY = 142,
  DecibelCurrencyTTD = 143,
  DecibelCurrencyTWD = 144,
  DecibelCurrencyTZS = 145,
  DecibelCurrencyUAH = 146,
  DecibelCurrencyUGX = 147,
  DecibelCurrencyUSD = 148,
  DecibelCurrencyUSN = 149,
  DecibelCurrencyUYI = 150,
  DecibelCurrencyUYU = 151,
  DecibelCurrencyUYW = 152,
  DecibelCurrencyUZS = 153,
  DecibelCurrencyVES = 154,
  DecibelCurrencyVND = 155,
  DecibelCurrencyVUV = 156,
  DecibelCurrencyWST = 157,
  DecibelCurrencyXAF = 158,
  DecibelCurrencyXAG = 159,
  DecibelCurrencyXAU = 160,
  DecibelCurrencyXCD = 161,
  DecibelCurrencyXDR = 162,
  DecibelCurrencyXOF = 163,
  DecibelCurrencyXPD = 164,
  DecibelCurrencyXPF = 165,
  DecibelCurrencyXPT = 166,
  DecibelCurrencyXSU = 167,
  DecibelCurrencyXTS = 168,
  DecibelCurrencyXUA = 169,
  DecibelCurrencyXXX = 170,
  DecibelCurrencyYER = 171,
  DecibelCurrencyZAR = 172,
  DecibelCurrencyZMW = 173,
  DecibelCurrencyZWL = 174,
};


/// To obtain the link to the user session you have to use the DecibelSDK delegate method in the
/// didFinishLaunchingWithOptions method of your application class.
SWIFT_PROTOCOL("_TtP18DecibelCoreFlutter15DecibelDelegate_")
@protocol DecibelDelegate
/// This method is called when a new session id is generated.
/// \param sessionUrl contains the URL to access the session replay in the Decibel portal
///
- (void)getSessionURL:(NSString * _Nonnull)sessionUrl;
@end

enum SDKMaskAutomatic : NSInteger;
enum SDKLogLevel : NSInteger;
@class UIView;

SWIFT_PROTOCOL("_TtP18DecibelCoreFlutter15DecibelProtocol_")
@protocol DecibelProtocol
@property (nonatomic, strong) id <DecibelDelegate> _Nullable delegate;
/// Initialize the SDK and start recording events. This method don’t start recording
/// you must to call startRecording() or set(screen: String?) for this.
/// \param account Customer account.
///
/// \param property Account property.
///
- (void)initializeWithAccount:(NSString * _Nonnull)account property:(NSString * _Nonnull)property;
/// Initialize the SDK and start recording events. This method don’t start recording
/// you must to call startRecording() or set(screen: String?) for this. Check before start recording the consent that has been passed.
/// \param account Customer account.
///
/// \param property Account property.
///
/// \param consents Consent with which you want the app to start. If you pass .all all consents will be enabled by default, if you pass .none all consents will be disabled.
///
- (void)initializeWithAccount:(NSString * _Nonnull)account property:(NSString * _Nonnull)property consents:(NSArray<NSNumber *> * _Nonnull)consents;
/// This method set the screen for a new recorder cycle.
/// \param screen The name of screen.
///
- (void)setWithScreen:(NSString * _Nonnull)screen;
/// This method set masking for the current screen.
/// \param mask Automatic configuration of component mask.
///
- (void)setMaskingForCurrentScreenWithMask:(enum SDKMaskAutomatic)mask;
/// This method sends any goal defined by the user.
/// \param goal The name of the goal.
///
/// \param value The value of the goal.
///
/// \param currency The currency in which the goal is expressed.
///
- (void)sendWithGoal:(NSString * _Nonnull)goal with:(float)value currency:(enum DecibelCurrency)currency;
/// This method sends any goal defined by the user.
/// \param goal The name of the goal.
///
/// \param value The value of the goal.
///
- (void)sendWithGoal:(NSString * _Nonnull)goal with:(float)value;
/// This method sends any goal defined by the user.
/// \param goal The name of the goal.
///
- (void)sendWithGoal:(NSString * _Nonnull)goal;
/// This method sends any dimension defined by the user.
/// \param dimension The name of the dimension.
///
/// \param value The value specifies of the dimension.
///
- (void)sendWithDimension:(NSString * _Nonnull)dimension withString:(NSString * _Nonnull)value;
/// \param dimension The name of the dimension.
///
/// \param value The value specifies of the dimension.
///
- (void)sendWithDimension:(NSString * _Nonnull)dimension withBool:(BOOL)value;
/// \param dimension The name of the dimension.
///
/// \param value The value specifies of the dimension.
///
- (void)sendWithDimension:(NSString * _Nonnull)dimension withNumber:(double)value;
/// This method enables or disables session replay. By default it is enabled.
/// \param enabled parameter that enables or disables session replay.
///
- (void)enabledSessionReplay:(BOOL)enabled;
/// Settings to mask all visual components that are selected throughout the application.
/// \param configuration type of masking selected.
///
- (void)setAutomaticMask:(enum SDKMaskAutomatic)configuration;
/// Method to mask a CGRect.
/// \param rect CGRect that you want to mask.
///
- (void)maskWithRect:(CGRect)area;
/// Method to enable consents.
/// \param consents DecibelCustomerConsentTypes that you want to enable.
///
- (void)setEnableConsents:(NSArray<NSNumber *> * _Nonnull)consents;
/// Method to disable consents.
/// \param consents DecibelCustomerConsentTypes that you want to disable.
///
- (void)setDisableConsents:(NSArray<NSNumber *> * _Nonnull)consents;
/// Method set the log level.
/// \param level DecibelLogLevelType that you want to set.
///
- (void)setLogLevel:(enum SDKLogLevel)level;
/// Method to send the correct submission of the form.
- (void)formSuccess;
/// Method to submit an error in the form.
/// \param error Error description.
///
/// \param selector The component that fails.
///
- (void)formErrorWithError:(NSString * _Nonnull)error selector:(UIView * _Nullable)selector;
/// Add or remove session to get user experience.
/// \param enabled enable or disable user experience
///
- (void)enableSessionForExperience:(BOOL)enabled;
/// Add or remove sessions to get application data and user interactions.
/// \param enabled enable or disable application data and user interactions.
///
- (void)enableSessionForAnalysis:(BOOL)enabled;
/// Add or remove session to get session replay.
/// \param enabled enable or disable session replay.
///
- (void)enableSessionForReplay:(BOOL)enabled;
/// Add or remove screen to get application data and user interactions.
/// \param enabled enable or disable application data and user interactions.
///
- (void)enableScreenForAnalysis:(BOOL)enabled;
/// Method to get webviews URL properties.
- (NSString * _Nullable)getWebViewProperties SWIFT_WARN_UNUSED_RESULT;
/// Method to submit an error in the HTTP requests.
/// \param error Error code.
///
- (void)sendHTTPErrorWithStatusCode:(NSInteger)statusCode;
@end

@class SDKMultiPlatform;

SWIFT_PROTOCOL("_TtP18DecibelCoreFlutter20DecibelMultiPlatform_")
@protocol DecibelMultiPlatform <DecibelProtocol>
/// Initialize the SDK and start recording events. This method don’t start recording
/// you must to call startRecording() or set(screen: String?) for this.
/// \param account Customer account.
///
/// \param property Account property.
///
- (void)initializeWithAccount:(NSString * _Nonnull)account property:(NSString * _Nonnull)property multiPlatform:(SDKMultiPlatform * _Nonnull)multiPlatform;
/// Initialize the SDK and start recording events. This method don’t start recording
/// you must to call startRecording() or set(screen: String?) for this. Check before start recording the consent that has been passed.
/// \param account Customer account.
///
/// \param property Account property.
///
/// \param consents Consent with which you want the app to start. If you pass .all all consents will be enabled by default, if you pass .none all consents will be disabled.
///
- (void)initializeWithAccount:(NSString * _Nonnull)account property:(NSString * _Nonnull)property consents:(NSArray<NSNumber *> * _Nonnull)consents multiPlatform:(SDKMultiPlatform * _Nonnull)multiPlatform;
/// This method return the current session ID.
- (NSString * _Nullable)getSessionId SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP18DecibelCoreFlutter14DecibelFlutter_")
@protocol DecibelFlutter <DecibelMultiPlatform>
/// This method set the screen for a new recorder cycle.
/// \param screen The name of screen.
///
/// \param id Identifier screen.
///
/// \param fromBackground Bool if screen comes from background
///
- (void)setWithScreen:(NSString * _Nonnull)screen id:(NSInteger)id fromBackground:(BOOL)fromBackground;
/// This method set the screen for a new recorder cycle.
/// \param screenshot Screenshot <code>Data</code>.
///
/// \param id Identifier screen.
///
/// \param screenName The name of screen.
///
/// \param startFocusTime TimeInterval when sent the screenshot.
///
- (void)saveScreenShotWithScreenshot:(NSData * _Nonnull)screenshot id:(NSInteger)id screenName:(NSString * _Nonnull)screenName startFocusTime:(NSTimeInterval)startFocusTime;
/// This method ends the current screen.
/// \param goesToBackground Bool if screen goes to background
///
- (void)endScreenWithGoesToBackground:(BOOL)goesToBackground;
@end



@protocol SDKSettings;

SWIFT_CLASS("_TtC18DecibelCoreFlutter10DecibelSDK")
@interface DecibelSDK : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <DecibelFlutter> _Nonnull multiPlatform;)
+ (id <DecibelFlutter> _Nonnull)multiPlatform SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <SDKSettings> _Nonnull settings;)
+ (id <SDKSettings> _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum for enabling or disable consents.
typedef SWIFT_ENUM(NSInteger, DecibelUserConsent, open) {
  DecibelUserConsentAll = 0,
  DecibelUserConsentRecordingAndTracking = 1,
  DecibelUserConsentTracking = 2,
  DecibelUserConsentForm = 3,
  DecibelUserConsentNone = 4,
};




/// Enum for the SDK logs.
typedef SWIFT_ENUM(NSInteger, SDKLogLevel, open) {
  SDKLogLevelNone = 0,
  SDKLogLevelInfo = 1,
};

/// Enum for automatic masking components.
/// <ul>
///   <li>
///     <code>.labels</code>: all UILabel fields are masked.
///   </li>
///   <li>
///     <code>.inputs</code>: all UITextField and UITextView fields are masked.
///   </li>
///   <li>
///     <code>.images</code>: all UIImageView will be masked.
///   </li>
///   <li>
///     <code>.webViews</code>: all WKWebView are masked whole view. (no elements inside it).
///   </li>
///   <li>
///     <code>.forms</code>: the view containing the form components must be set to true the diFormTrack property and these components will be masked automatically.
///   </li>
///   <li>
///     <code>.all</code>: all case masks the rest of the cases (.labels, .inputs and .images).
///   </li>
///   <li>
///     <code>.noMask</code>: no masking anything.
///   </li>
///   <li>
///     <code>.unmaskInputs</code>: The Inputs are masking by default, with this option you can unmask all.
///   </li>
///   <li>
///     <code>.unmaskWebViews</code>: The WebView are masking by default, with this option you can unmask all.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SDKMaskAutomatic, open) {
/// All UILabel fields are masked
  SDKMaskAutomaticLabels = 0,
/// All UITextField and UITextView fields are masked, it’s masking by defdault.
  SDKMaskAutomaticInputs = 1,
/// All UIImageView will be masked.
  SDKMaskAutomaticImages = 2,
/// All WKWebView are masked whole view. (no elements inside it), it’s masking by defdault.
  SDKMaskAutomaticWebViews = 3,
/// The view containing the form components must be set to true the
/// diFormTrack property and these components will be masked automatically.
  SDKMaskAutomaticForms = 4,
/// All case masks the rest of the cases (.labels, .inputs and .images).
  SDKMaskAutomaticAll = 5,
/// No masking anything.
  SDKMaskAutomaticNoMask = 6,
/// The Inputs are masking by default, with this option you can unmask all.
  SDKMaskAutomaticUnmaskInputs = 7,
/// The WebView are masking by default, with this option you can unmask all.
  SDKMaskAutomaticUnmaskWebViews = 8,
};

typedef SWIFT_ENUM(NSInteger, SDKMaskView, open) {
  SDKMaskViewAutomatic = 0,
  SDKMaskViewMask = 1,
  SDKMaskViewUnmask = 2,
};


SWIFT_CLASS("_TtC18DecibelCoreFlutter16SDKMultiPlatform")
@interface SDKMultiPlatform : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SDKPlatformType, open) {
  SDKPlatformTypeFlutter = 0,
  SDKPlatformTypeXamarin = 1,
};

/// Defines the behaviour of choosing screens to record or choosing which will not be recorded.
/// <ul>
///   <li>
///     <code>.defineScreensToRecord</code>: this mode will not record any screen by default.
///     To record a specific screen, it must be defined within the screen that you want to record.
///   </li>
///   <li>
///     <code>.defineScreensToStopRecord</code>: this mode records all screens by default. If it is required not to record a specific screen,
///     it must be specified on the screen.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SDKRecordingMode, open) {
  SDKRecordingModeDefineScreensToRecord = 0,
  SDKRecordingModeDefineScreensToStopRecord = 1,
};

/// Defines the behaviour of video recording. There are three modes.
/// <ul>
///   <li>
///     <code>record</code>:  with this option in the main view on a view controller the screen will not be recorded. It is only necessary when
///     the recordingMode is .defineScreensToStopRecord.
///   </li>
///   <li>
///     <code>noRecord</code>:  with this option in the main view on a view controller the screen will be recorded. It is only necessary when
///     the recordingMode is .defineScreensToRecord.
///   </li>
///   <li>
///     <code>undefined</code>: this is the default option. This screen will be recorded depending on the value of recordingMode. In the
///     case of .defineScreensToRecord the screen will not be recorded and with the case of .defineScreensToStopRecord the screen will be recorded.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SDKRecordingScreen, open) {
  SDKRecordingScreenRecord = 0,
  SDKRecordingScreenNoRecord = 1,
  SDKRecordingScreenUndefined = 2,
};

/// Defines the type of session replay that we want to see from the user. There are three modes:
/// <ul>
///   <li>
///     <code>.hiFi</code>: for this case it will be a replay session with great definition. All components will be recorded.
///     It is not recommended to use this method in the case of masking some components.
///   </li>
///   <li>
///     <code>.loFi</code>: this mode will record the screen in low fidelity. Not all components will be recorded as shown on the
///     screen but it can be used to give us an idea of what the screen looks like. This mode is recommended for screens that have some masking.
///   </li>
///   <li>
///     <code>.automatic</code>: in this case the type is selected automatically, being High fidelity in all the screens that do not contain
///     masks and Low fidelity in those that contain some component to mask.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SDKSessionReplayType, open) {
  SDKSessionReplayTypeHiFi = 0,
  SDKSessionReplayTypeLoFi = 1,
  SDKSessionReplayTypeAutomatic = 2,
};


SWIFT_PROTOCOL("_TtP18DecibelCoreFlutter11SDKSettings_")
@protocol SDKSettings
/// Property to change the settings for sending the data. With a true value, the data is sent both by
/// Wi-Fi and mobile data.
@property (nonatomic) BOOL mobileDataEnable;
/// Enable/Disable Crash Reporter feature.
@property (nonatomic) BOOL crashReporterEnable;
/// Defines the behaviour of video recording. There are two modes.
/// note:
/// <code>.defineScreensToStopRecord</code>: This mode records all screens by default. If it is required not to
/// record a specific screen, it must be specified on the screen. This mode is enabled by default.
/// <ul>
///   <li>
///     <code>.defineScreensToRecord</code>: This mode will not record any screen by default.
///     To record a specific screen, it must be defined within the screen that you want to record.
///   </li>
/// </ul>
@property (nonatomic) enum SDKRecordingMode recordingMode;
/// Defines the type of session replay that we want to see from the user. There are four modes:
/// <ul>
///   <li>
///     <code>.hiFi</code>: For this case it will be a replay session with great definition.
///     All components will be recorded. It is not recommended to use this method in the case of masking some components.
///   </li>
///   <li>
///     <code>.loFi</code>: This mode will record the screen in low fidelity. Not all components will be recorded as shown
///     on the screen but it can be used to give us an idea of what the screen looks like.
///     This mode is recommended for screens that have some masking.
///   </li>
///   <li>
///     <code>.automatic</code>: In this case the type is selected automatically, being High fidelity in all the screens that do not
///     contain masks and Low fidelity in those that contain some component to mask.
///   </li>
/// </ul>
@property (nonatomic) enum SDKSessionReplayType sessionReplayType;
@end















@interface UIView (SWIFT_EXTENSION(DecibelCoreFlutter))
@property (nonatomic) enum SDKMaskView diMasking;
@property (nonatomic) BOOL diFormTrack;
@property (nonatomic) enum SDKRecordingScreen diAddScreenForRecording;
@property (nonatomic) enum SDKSessionReplayType diSessionReplayType;
@end


@interface UIViewController (SWIFT_EXTENSION(DecibelCoreFlutter))
@property (nonatomic, copy) NSString * _Nullable diScreenName;
@end







#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
